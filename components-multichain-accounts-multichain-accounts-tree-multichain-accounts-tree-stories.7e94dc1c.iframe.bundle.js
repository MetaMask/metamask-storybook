"use strict";(globalThis.webpackChunkmetamask_crx=globalThis.webpackChunkmetamask_crx||[]).push([[42945],{"./node_modules/@metamask/assets-controllers/dist/selectors/token-selectors.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{w:()=>selectAssetsBySelectedAccountGroup});var util=__webpack_require__("./node_modules/@metamask/controller-utils/dist/util.mjs"),number=__webpack_require__("./node_modules/@metamask/utils/dist/number.mjs"),caip_types=__webpack_require__("./node_modules/@metamask/utils/dist/caip-types.mjs"),reselect=__webpack_require__("./node_modules/reselect/dist/reselect.mjs");function stringifyBalanceWithDecimals(balance,decimals,balanceDecimals=5){if(0n===balance||0===decimals)return balance.toString();let bal=balance.toString(),len=bal.length,decimalIndex=len-decimals,prefix="";if(decimalIndex<=0){for(;prefix.length<=-1*decimalIndex;)prefix+="0",len+=1;bal=prefix+bal,decimalIndex=1}let whole=bal.slice(0,len-decimals);if(0===balanceDecimals)return whole;let fractional=bal.slice(decimalIndex,decimalIndex+balanceDecimals);if(/0+$/u.test(fractional)){let withOnlySigZeroes=bal.slice(decimalIndex).replace(/0+$/u,"");return withOnlySigZeroes.length>0&&(withOnlySigZeroes=`.${withOnlySigZeroes}`),`${whole}${withOnlySigZeroes}`}return`${whole}.${fractional}`}function parseBalanceWithDecimals(balanceString,decimals){if(!/^\d+(\.\d+)?$/u.test(balanceString))return;let[integerPart,fractionalPart=""]=balanceString.split(".");return 0===decimals?(0,number.Q9)(BigInt(integerPart)):fractionalPart.length>=decimals?(0,number.Q9)(BigInt(`${integerPart}${fractionalPart.slice(0,decimals)}`)):(0,number.Q9)(BigInt(`${integerPart}${fractionalPart}${"0".repeat(decimals-fractionalPart.length)}`))}var codefi_v2=__webpack_require__("./node_modules/@metamask/assets-controllers/dist/token-prices-service/codefi-v2.mjs");let MULTICHAIN_NATIVE_ASSET_IDS=["bip122:000000000019d6689c085ae165831e93/slip44:0","solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/slip44:501"],createAssetListSelector=reselect.Mz.withTypes(),selectAccountsToGroupIdMap=createAssetListSelector([state=>state.accountTree,state=>state.internalAccounts],(accountTree,internalAccounts)=>{let accountsMap={};for(let{groups}of Object.values(accountTree.wallets))for(let{id:accountGroupId,accounts}of Object.values(groups))for(let accountId of accounts){let internalAccount=internalAccounts.accounts[accountId];accountsMap[internalAccount.type.startsWith("eip155")?internalAccount.address:accountId]={accountGroupId,type:internalAccount.type,accountId}}return accountsMap}),selectAllEvmAccountNativeBalances=createAssetListSelector([selectAccountsToGroupIdMap,state=>state.accountsByChainId,state=>state.marketData,state=>state.currencyRates,state=>state.currentCurrency,state=>state.networkConfigurationsByChainId],(accountsMap,accountsByChainId,marketData,currencyRates,currentCurrency,networkConfigurationsByChainId)=>{var _a;let groupAssets={};for(let[chainId,chainAccounts]of Object.entries(accountsByChainId))for(let[accountAddress,accountBalance]of Object.entries(chainAccounts)){let account=accountsMap[accountAddress.toLowerCase()];if(!account)continue;let{accountGroupId,type,accountId}=account;groupAssets[accountGroupId]??(groupAssets[accountGroupId]={}),(_a=groupAssets[accountGroupId])[chainId]??(_a[chainId]=[]);let groupChainAssets=groupAssets[accountGroupId][chainId],rawBalance=accountBalance.balance||"0x0",nativeCurrency=networkConfigurationsByChainId[chainId]?.nativeCurrency||"NATIVE",nativeToken={address:(0,codefi_v2.NH)(chainId),decimals:18,name:"ETH"===nativeCurrency?"Ethereum":nativeCurrency,symbol:nativeCurrency,image:""},fiatData=getFiatBalanceForEvmToken(rawBalance,nativeToken.decimals,marketData,currencyRates,chainId,nativeToken.address);groupChainAssets.push({type:type,assetId:nativeToken.address,isNative:!0,address:nativeToken.address,image:nativeToken.image,name:nativeToken.name,symbol:nativeToken.symbol,accountId,decimals:nativeToken.decimals,rawBalance,balance:stringifyBalanceWithDecimals((0,number.uU)(rawBalance),nativeToken.decimals),fiat:fiatData?{balance:fiatData.balance,currency:currentCurrency,conversionRate:fiatData.conversionRate}:void 0,chainId})}return groupAssets}),selectAllEvmAssets=createAssetListSelector([selectAccountsToGroupIdMap,state=>state.allTokens,state=>state.allIgnoredTokens,state=>state.tokenBalances,state=>state.marketData,state=>state.currencyRates,state=>state.currentCurrency],(accountsMap,evmTokens,ignoredEvmTokens,tokenBalances,marketData,currencyRates,currentCurrency)=>{var _a;let groupAssets={};for(let[chainId,chainTokens]of Object.entries(evmTokens))for(let[accountAddress,addressTokens]of Object.entries(chainTokens))for(let token of addressTokens){let tokenAddress=token.address,account=accountsMap[accountAddress];if(!account)continue;let{accountGroupId,type,accountId}=account;if(ignoredEvmTokens[chainId]?.[accountAddress]?.includes(tokenAddress))continue;let rawBalance=tokenBalances[accountAddress]?.[chainId]?.[tokenAddress];if(!rawBalance)continue;groupAssets[accountGroupId]??(groupAssets[accountGroupId]={}),(_a=groupAssets[accountGroupId])[chainId]??(_a[chainId]=[]);let groupChainAssets=groupAssets[accountGroupId][chainId],fiatData=getFiatBalanceForEvmToken(rawBalance,token.decimals,marketData,currencyRates,chainId,tokenAddress);groupChainAssets.push({type:type,assetId:tokenAddress,isNative:!1,address:tokenAddress,image:token.image??"",name:token.name??token.symbol,symbol:token.symbol,accountId,decimals:token.decimals,rawBalance,balance:stringifyBalanceWithDecimals((0,number.uU)(rawBalance),token.decimals),fiat:fiatData?{balance:fiatData.balance,currency:currentCurrency,conversionRate:fiatData.conversionRate}:void 0,chainId})}return groupAssets}),selectAllMultichainAssets=createAssetListSelector([selectAccountsToGroupIdMap,state=>state.accountsAssets,state=>state.assetsMetadata,state=>state.balances,state=>state.conversionRates,state=>state.currentCurrency],(accountsMap,multichainTokens,multichainAssetsMetadata,multichainBalances,multichainConversionRates,currentCurrency)=>{var _a;let groupAssets={};for(let[accountId,accountAssets]of Object.entries(multichainTokens))for(let assetId of accountAssets){let caipAsset;try{caipAsset=(0,caip_types.Ts)(assetId)}catch{continue}let{chainId}=caipAsset,asset=`${caipAsset.assetNamespace}:${caipAsset.assetReference}`,account=accountsMap[accountId],assetMetadata=multichainAssetsMetadata[assetId];if(!account||!assetMetadata)continue;let{accountGroupId,type}=account;groupAssets[accountGroupId]??(groupAssets[accountGroupId]={}),(_a=groupAssets[accountGroupId])[chainId]??(_a[chainId]=[]);let groupChainAssets=groupAssets[accountGroupId][chainId],balance=multichainBalances[accountId]?.[assetId],decimals=assetMetadata.units.find(unit=>unit.name===assetMetadata.name&&unit.symbol===assetMetadata.symbol)?.decimals;if(!balance||void 0===decimals)continue;let rawBalance=parseBalanceWithDecimals(balance.amount,decimals);if(!rawBalance)continue;let fiatData=getFiatBalanceForMultichainAsset(balance,multichainConversionRates,assetId);groupChainAssets.push({type:type,assetId,isNative:MULTICHAIN_NATIVE_ASSET_IDS.includes(assetId),image:assetMetadata.iconUrl,name:assetMetadata.name??assetMetadata.symbol??asset,symbol:assetMetadata.symbol??asset,accountId,decimals,rawBalance,balance:balance.amount,fiat:fiatData?{balance:fiatData.balance,currency:currentCurrency,conversionRate:fiatData.conversionRate}:void 0,chainId})}return groupAssets}),selectAllAssets=createAssetListSelector([selectAllEvmAssets,selectAllMultichainAssets,selectAllEvmAccountNativeBalances],(evmAssets,multichainAssets,evmAccountNativeBalances)=>{let groupAssets={};return mergeAssets(groupAssets,evmAssets),mergeAssets(groupAssets,multichainAssets),mergeAssets(groupAssets,evmAccountNativeBalances),groupAssets}),selectAssetsBySelectedAccountGroup=createAssetListSelector([selectAllAssets,state=>state.accountTree],(groupAssets,accountTree)=>{let{selectedAccountGroup}=accountTree;return selectedAccountGroup&&groupAssets[selectedAccountGroup]||{}});function mergeAssets(existingAssets,newAssets){for(let[accountGroupId,accountAssets]of Object.entries(newAssets)){let existingAccountGroupAssets=existingAssets[accountGroupId];if(existingAccountGroupAssets)for(let[network,chainAssets]of Object.entries(accountAssets))existingAccountGroupAssets[network]??(existingAccountGroupAssets[network]=[]),existingAccountGroupAssets[network].push(...chainAssets);else for(let[network,chainAssets]of(existingAssets[accountGroupId]={},Object.entries(accountAssets)))existingAssets[accountGroupId][network]=[...chainAssets]}}function getFiatBalanceForEvmToken(rawBalance,decimals,marketData,currencyRates,chainId,tokenAddress){let tokenMarketData=marketData[chainId]?.[tokenAddress];if(!tokenMarketData)return;let currencyRate=currencyRates[tokenMarketData.currency];if(currencyRate?.conversionRate)return{balance:(0,util.n6)(rawBalance)/10**decimals*tokenMarketData.price*currencyRate.conversionRate,conversionRate:currencyRate.conversionRate}}function getFiatBalanceForMultichainAsset(balance,multichainConversionRates,assetId){let assetMarketData=multichainConversionRates[assetId];if(assetMarketData?.rate)return{balance:Number(balance.amount)*Number(assetMarketData.rate),conversionRate:Number(assetMarketData.rate)}}},"./ui/components/multichain-accounts/multichain-accounts-tree/multichain-accounts-tree.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,EOAAccountsOnly:()=>EOAAccountsOnly,ERC4337AccountsOnly:()=>ERC4337AccountsOnly,WithPrivacyMode:()=>WithPrivacyMode,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _obj,react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_metamask_keyring_api__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@metamask/keyring-api/dist/index.mjs"),_shared_constants_eth_methods__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./shared/constants/eth-methods.ts"),_index__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./ui/components/multichain-accounts/multichain-accounts-tree/index.ts");function _define_property(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _object_spread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{},ownKeys=Object.keys(source);"function"==typeof Object.getOwnPropertySymbols&&(ownKeys=ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym){return Object.getOwnPropertyDescriptor(source,sym).enumerable}))),ownKeys.forEach(function(key){_define_property(target,key,source[key])})}return target}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable})),keys.push.apply(keys,symbols)}return keys}function _object_spread_props(target,source){return source=null!=source?source:{},Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}),target}let __WEBPACK_DEFAULT_EXPORT__={title:"Components/MultichainAccounts/MultichainAccountsTree",component:_index__WEBPACK_IMPORTED_MODULE_3__.r,parameters:{docs:{description:{component:"A tree view for displaying accounts grouped by wallets"}}},argTypes:{onClose:{action:"onClose"},onAccountListItemItemClicked:{action:"onAccountListItemItemClicked"}}};var walletOneId="entropy:01JKAF3DSGM3AB87EM9N0K41AJ",walletOneGroupId="".concat(walletOneId,"/default"),walletTwoId="entropy:01JKAF3PJ247KAM6C03G5Q0NP8",walletTwoGroupId="".concat(walletTwoId,"/default"),mockWallets=(_define_property(_obj={},walletOneId,{id:walletOneId,metadata:{name:"Wallet 1"},groups:_define_property({},walletOneGroupId,{id:walletOneGroupId,metadata:{name:"Default"},accounts:[{address:"0x0dcd5d886577d5081b0c52e242ef29e70be3e7bc",id:"account-1",metadata:{name:"Account 1",keyring:{type:"HD Key Tree"},importTime:0},options:{},methods:_shared_constants_eth_methods__WEBPACK_IMPORTED_MODULE_2__.z,scopes:[_metamask_keyring_api__WEBPACK_IMPORTED_MODULE_1__.OO.Eoa],type:_metamask_keyring_api__WEBPACK_IMPORTED_MODULE_1__.j0.Eoa,balance:"0x0",pinned:!1,hidden:!1,lastSelected:0,active:!1,keyring:{type:"HD Key Tree"},label:""},{address:"0x123456789abcdef0123456789abcdef012345678",id:"account-2",metadata:{name:"Account 2",keyring:{type:"HD Key Tree"},importTime:0},options:{},methods:_shared_constants_eth_methods__WEBPACK_IMPORTED_MODULE_2__.z,scopes:[_metamask_keyring_api__WEBPACK_IMPORTED_MODULE_1__.OO.Eoa],type:_metamask_keyring_api__WEBPACK_IMPORTED_MODULE_1__.j0.Eoa,balance:"0x0",pinned:!1,hidden:!1,lastSelected:0,active:!1,keyring:{type:"HD Key Tree"},label:""}]})}),_define_property(_obj,walletTwoId,{id:walletTwoId,metadata:{name:"Wallet 2"},groups:_define_property({},walletTwoGroupId,{id:walletTwoGroupId,metadata:{name:"Default"},accounts:[{address:"0xabcdef0123456789abcdef0123456789abcdef01",id:"account-3",metadata:{name:"Account 3",keyring:{type:"HD Key Tree"},importTime:0},options:{},methods:_shared_constants_eth_methods__WEBPACK_IMPORTED_MODULE_2__.z,scopes:[_metamask_keyring_api__WEBPACK_IMPORTED_MODULE_1__.OO.Eoa],type:_metamask_keyring_api__WEBPACK_IMPORTED_MODULE_1__.j0.Erc4337,balance:"0x0",pinned:!1,hidden:!1,lastSelected:0,active:!1,keyring:{type:"HD Key Tree"},label:""}]})}),_obj),Template=function(args){return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{width:"375px",border:"1px solid #ccc",borderRadius:"8px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_index__WEBPACK_IMPORTED_MODULE_3__.r,args))},Default=Template.bind({});Default.args={wallets:mockWallets,allowedAccountTypes:[_metamask_keyring_api__WEBPACK_IMPORTED_MODULE_1__.j0.Eoa,_metamask_keyring_api__WEBPACK_IMPORTED_MODULE_1__.j0.Erc4337],connectedSites:{"0x0dcd5d886577d5081b0c52e242ef29e70be3e7bc":[{origin:"https://test.dapp",iconUrl:"https://test.dapp/icon.png"}]},currentTabOrigin:"https://test.dapp",privacyMode:!1,selectedAccount:mockWallets[walletOneId].groups[walletOneGroupId].accounts[0]};var EOAAccountsOnly=Template.bind({});EOAAccountsOnly.args=_object_spread_props(_object_spread({},Default.args),{allowedAccountTypes:[_metamask_keyring_api__WEBPACK_IMPORTED_MODULE_1__.j0.Eoa]}),EOAAccountsOnly.parameters={docs:{description:{story:"Shows only EOA (Externally Owned Account) type accounts"}}};var ERC4337AccountsOnly=Template.bind({});ERC4337AccountsOnly.args=_object_spread_props(_object_spread({},Default.args),{allowedAccountTypes:[_metamask_keyring_api__WEBPACK_IMPORTED_MODULE_1__.j0.Erc4337]}),ERC4337AccountsOnly.parameters={docs:{description:{story:"Shows only ERC4337 (Smart Contract) type accounts"}}};var WithPrivacyMode=Template.bind({});WithPrivacyMode.args=_object_spread_props(_object_spread({},Default.args),{privacyMode:!0}),WithPrivacyMode.parameters={docs:{description:{story:"Displays accounts with privacy mode enabled"}}},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:`args => <div style={{
  width: '375px',
  border: '1px solid #ccc',
  borderRadius: '8px'
}}>
    <MultichainAccountsTree {...args} />
  </div>`,...Default.parameters?.docs?.source}}},EOAAccountsOnly.parameters={...EOAAccountsOnly.parameters,docs:{...EOAAccountsOnly.parameters?.docs,source:{originalSource:`args => <div style={{
  width: '375px',
  border: '1px solid #ccc',
  borderRadius: '8px'
}}>
    <MultichainAccountsTree {...args} />
  </div>`,...EOAAccountsOnly.parameters?.docs?.source}}},ERC4337AccountsOnly.parameters={...ERC4337AccountsOnly.parameters,docs:{...ERC4337AccountsOnly.parameters?.docs,source:{originalSource:`args => <div style={{
  width: '375px',
  border: '1px solid #ccc',
  borderRadius: '8px'
}}>
    <MultichainAccountsTree {...args} />
  </div>`,...ERC4337AccountsOnly.parameters?.docs?.source}}},WithPrivacyMode.parameters={...WithPrivacyMode.parameters,docs:{...WithPrivacyMode.parameters?.docs,source:{originalSource:`args => <div style={{
  width: '375px',
  border: '1px solid #ccc',
  borderRadius: '8px'
}}>
    <MultichainAccountsTree {...args} />
  </div>`,...WithPrivacyMode.parameters?.docs?.source}}};let __namedExportsOrder=["Default","EOAAccountsOnly","ERC4337AccountsOnly","WithPrivacyMode"]}}]);
//# sourceMappingURL=components-multichain-accounts-multichain-accounts-tree-multichain-accounts-tree-stories.7e94dc1c.iframe.bundle.js.map