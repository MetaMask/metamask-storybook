"use strict";(globalThis.webpackChunkmetamask_crx=globalThis.webpackChunkmetamask_crx||[]).push([[8465],{"./ui/components/app/network-display/network-display.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{DefaultStory:()=>DefaultStory,DisplayOnly:()=>DisplayOnly,TargetNetwork:()=>TargetNetwork,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _DefaultStory_parameters,_DefaultStory_parameters_docs,_DefaultStory_parameters1,_TargetNetwork_parameters,_TargetNetwork_parameters_docs,_TargetNetwork_parameters1,_DisplayOnly_parameters,_DisplayOnly_parameters_docs,_DisplayOnly_parameters1,react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_shared_constants_network__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./shared/constants/network.ts"),_helpers_constants_design_system__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./ui/helpers/constants/design-system.ts"),_component_library_banner_alert__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./ui/components/component-library/banner-alert/index.ts"),___WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./ui/components/app/network-display/index.js");function _array_like_to_array(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _array_without_holes(arr){if(Array.isArray(arr))return _array_like_to_array(arr)}function _define_property(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _iterable_to_array(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}function _non_iterable_spread(){throw TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _object_spread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{},ownKeys=Object.keys(source);"function"==typeof Object.getOwnPropertySymbols&&(ownKeys=ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym){return Object.getOwnPropertyDescriptor(source,sym).enumerable}))),ownKeys.forEach(function(key){_define_property(target,key,source[key])})}return target}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable})),keys.push.apply(keys,symbols)}return keys}function _object_spread_props(target,source){return source=null!=source?source:{},Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}),target}function _to_consumable_array(arr){return _array_without_holes(arr)||_iterable_to_array(arr)||_unsupported_iterable_to_array(arr)||_non_iterable_spread()}function _unsupported_iterable_to_array(o,minLen){if(o){if("string"==typeof o)return _array_like_to_array(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if("Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n)return Array.from(n);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _array_like_to_array(o,minLen)}}let __WEBPACK_DEFAULT_EXPORT__={title:"Components/App/NetworkDisplay",argTypes:{indicatorSize:{control:"select",options:Object.values(_helpers_constants_design_system__WEBPACK_IMPORTED_MODULE_2__.$u)},labelProps:{control:"object"},targetNetwork:{control:"select",options:_to_consumable_array(Object.keys(_shared_constants_network__WEBPACK_IMPORTED_MODULE_1__.Jl)).concat([_shared_constants_network__WEBPACK_IMPORTED_MODULE_1__.Qv.RPC])},disabled:{control:"boolean"},onClick:{action:"onClick",description:"The onClick event handler of the NetworkDisplay. If it is not passed it is assumed that the NetworkDisplay SHOULD NOT be interactive and removes the caret and changes the border color of the NetworkDisplay to border-muted"}},args:{targetNetwork:"goerli"}};var DefaultStory=function(args){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_component_library_banner_alert__WEBPACK_IMPORTED_MODULE_3__.w,{severity:_helpers_constants_design_system__WEBPACK_IMPORTED_MODULE_2__.zb.Warning,title:"Deprecated",description:"The <NetworkDisplay> component has been deprecated in favor of the new <PickerNetwork> component from the component-library. Please update your code to use the new <PickerNetwork> component instead, which can be found at ui/components/component-library/picker-network/picker-network.tsx.",actionButtonLabel:"See details",actionButtonProps:{href:"https://github.com/MetaMask/metamask-extension/issues/20485"},marginBottom:4}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(___WEBPACK_IMPORTED_MODULE_4__.Z,_object_spread_props(_object_spread({},args),{targetNetwork:{type:args.targetNetwork,nickname:args.targetNetwork}})))};DefaultStory.storyName="Default";var TargetNetwork=function(args){var targetNetworkArr=_to_consumable_array(Object.keys(_shared_constants_network__WEBPACK_IMPORTED_MODULE_1__.Jl)).concat([_shared_constants_network__WEBPACK_IMPORTED_MODULE_1__.Qv.RPC]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,Object.values(targetNetworkArr).map(function(variant){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(___WEBPACK_IMPORTED_MODULE_4__.Z,_object_spread_props(_object_spread({},args),{key:variant,targetNetwork:{type:variant,nickname:variant}}))}))},DisplayOnly=function(args){var targetNetworkArr=_to_consumable_array(Object.keys(_shared_constants_network__WEBPACK_IMPORTED_MODULE_1__.Jl)).concat([_shared_constants_network__WEBPACK_IMPORTED_MODULE_1__.Qv.RPC]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,Object.values(targetNetworkArr).map(function(variant){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(___WEBPACK_IMPORTED_MODULE_4__.Z,_object_spread_props(_object_spread({},args),{key:variant,targetNetwork:{type:variant,nickname:variant},onClick:void 0}))}))};DefaultStory.parameters=_object_spread_props(_object_spread({},DefaultStory.parameters),{docs:_object_spread_props(_object_spread({},null===(_DefaultStory_parameters=DefaultStory.parameters)||void 0===_DefaultStory_parameters?void 0:_DefaultStory_parameters.docs),{source:_object_spread({originalSource:'args => <>\n    <BannerAlert severity={Severity.Warning} title="Deprecated" description="The <NetworkDisplay> component has been deprecated in favor of the new <PickerNetwork> component from the component-library.\n        Please update your code to use the new <PickerNetwork> component instead, which can be found at ui/components/component-library/picker-network/picker-network.tsx." actionButtonLabel="See details" actionButtonProps={{\n    href: \'https://github.com/MetaMask/metamask-extension/issues/20485\'\n  }} marginBottom={4} />\n    <NetworkDisplay {...args} targetNetwork={{\n    type: args.targetNetwork,\n    nickname: args.targetNetwork\n  }} />\n  </>'},null===(_DefaultStory_parameters1=DefaultStory.parameters)||void 0===_DefaultStory_parameters1?void 0:null===(_DefaultStory_parameters_docs=_DefaultStory_parameters1.docs)||void 0===_DefaultStory_parameters_docs?void 0:_DefaultStory_parameters_docs.source)})}),TargetNetwork.parameters=_object_spread_props(_object_spread({},TargetNetwork.parameters),{docs:_object_spread_props(_object_spread({},null===(_TargetNetwork_parameters=TargetNetwork.parameters)||void 0===_TargetNetwork_parameters?void 0:_TargetNetwork_parameters.docs),{source:_object_spread({originalSource:"args => {\n  const targetNetworkArr = [...Object.keys(BUILT_IN_NETWORKS), NETWORK_TYPES.RPC];\n  return <>\n      {Object.values(targetNetworkArr).map(variant => <NetworkDisplay {...args} key={variant} targetNetwork={{\n      type: variant,\n      nickname: variant\n    }} />)}\n    </>;\n}"},null===(_TargetNetwork_parameters1=TargetNetwork.parameters)||void 0===_TargetNetwork_parameters1?void 0:null===(_TargetNetwork_parameters_docs=_TargetNetwork_parameters1.docs)||void 0===_TargetNetwork_parameters_docs?void 0:_TargetNetwork_parameters_docs.source)})}),DisplayOnly.parameters=_object_spread_props(_object_spread({},DisplayOnly.parameters),{docs:_object_spread_props(_object_spread({},null===(_DisplayOnly_parameters=DisplayOnly.parameters)||void 0===_DisplayOnly_parameters?void 0:_DisplayOnly_parameters.docs),{source:_object_spread({originalSource:"args => {\n  const targetNetworkArr = [...Object.keys(BUILT_IN_NETWORKS), NETWORK_TYPES.RPC];\n  return <>\n      {Object.values(targetNetworkArr).map(variant => <NetworkDisplay {...args} key={variant} targetNetwork={{\n      type: variant,\n      nickname: variant\n    }} onClick={undefined} />)}\n    </>;\n}"},null===(_DisplayOnly_parameters1=DisplayOnly.parameters)||void 0===_DisplayOnly_parameters1?void 0:null===(_DisplayOnly_parameters_docs=_DisplayOnly_parameters1.docs)||void 0===_DisplayOnly_parameters_docs?void 0:_DisplayOnly_parameters_docs.source)})})}}]);