{"version":3,"file":"components-component-library-skeleton-skeleton-stories.8f10c002.iframe.bundle.js","mappings":";AAqBA;AAIA;AAEA;AAGA;AAEA;AAGA;AAQA;AAEA;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAMA;AAIA;AAEA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAUA;AAEA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAQA;AAEA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACuIA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://metamask-crx/./ui/components/component-library/skeleton/README.mdx","webpack://metamask-crx/"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/home/runner/work/metamask-extension/metamask-extension/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Controls, Canvas} from '@storybook/blocks';\nimport * as SkeletonStories from './skeleton.stories';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    h2: \"h2\",\n    h3: \"h3\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"skeleton\",\n      children: \"Skeleton\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Skeleton\"\n      }), \" is a placeholder component that is used while the content is loading.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      of: SkeletonStories.DefaultStory\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"props\",\n      children: \"Props\"\n    }), \"\\n\", _jsx(Controls, {\n      of: SkeletonStories.DefaultStory\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"width-height\",\n      children: \"Width Height\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"width\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"height\"\n      }), \" props to specify the width and height of the \", _jsx(_components.code, {\n        children: \"Skeleton\"\n      }), \" component. It accepts both numbers and strings.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      of: SkeletonStories.WidthHeight\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Skeleton } from '../../component-library';\\n\\n<Skeleton height={32} width={300} />\\n<Skeleton height={16} width={250} />\\n<Skeleton height={16} width={250} />\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"children\",\n      children: \"Children\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"children\"\n      }), \" prop to pass the \", _jsx(_components.code, {\n        children: \"Skeleton\"\n      }), \" children.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This is useful to create a \", _jsx(_components.code, {\n        children: \"Skeleton\"\n      }), \" component that has a similar layout to the content that will be loaded.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      of: SkeletonStories.Children\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import {\\n  Display,\\n  FlexDirection,\\n  BackgroundColor,\\n  BorderRadius,\\n} from '../../../helpers/constants/design-system';\\nimport { Skeleton } from '../../component-library';\\n\\n<Skeleton\\n  display={Display.Flex}\\n  flexDirection={FlexDirection.Column}\\n  gap={4}\\n  backgroundColor={BackgroundColor.backgroundAlternative}\\n  borderRadius={BorderRadius.LG}\\n  padding={4}\\n>\\n  <Skeleton height={32} width=\\\"100%\\\" />\\n  <Skeleton height={16} width=\\\"95%\\\" />\\n  <Skeleton height={16} width=\\\"95%\\\" />\\n</Skeleton>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"hide-children\",\n      children: \"Hide Children\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"hideChildren\"\n      }), \" prop to hide the \", _jsx(_components.code, {\n        children: \"children\"\n      }), \" of the \", _jsx(_components.code, {\n        children: \"Skeleton\"\n      }), \" component. This is useful to make sure the \", _jsx(_components.code, {\n        children: \"Skeleton\"\n      }), \" component is the same size as the content that will be loaded.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      of: SkeletonStories.HideChildren\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Skeleton, Text, TextVariant } from '../../component-library';\\n\\nisLoaded ? (\\n  <Text variant={TextVariant.headingMd}>Content to load</Text>\\n) : (\\n  <Skeleton width=\\\"max-content\\\" hideChildren={true}>\\n    <Text variant={TextVariant.headingMd}>Hidden placeholder text</Text>\\n  </Skeleton>\\n);\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"border-radius\",\n      children: \"Border Radius\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"borderRadius\"\n      }), \" prop and \", _jsx(_components.code, {\n        children: \"BorderRadius\"\n      }), \" enum to specify the border radius of the \", _jsx(_components.code, {\n        children: \"Skeleton\"\n      }), \" component.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      of: SkeletonStories.BorderRadiusStory\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { BorderRadius } from '../../../helpers/constants/design-system'\\nimport { Skeleton } from '../../component-library';\\n\\n<Skeleton borderRadius={BorderRadius.full} height={32} width={32} />\\n<Skeleton borderRadius={BorderRadius.pill} height={32} width=\\\"100%\\\" />\\n<Skeleton borderRadius={BorderRadius.LG} height={32} width=\\\"100%\\\" />\\n<Skeleton borderRadius={BorderRadius.MD} height={32} width=\\\"100%\\\" />\\n<Skeleton borderRadius={BorderRadius.SM} height={32} width=\\\"100%\\\" />\\n<Skeleton borderRadius={BorderRadius.XS} height={32} width=\\\"100%\\\" />\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":[],"sourceRoot":""}