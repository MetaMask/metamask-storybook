{"version":3,"file":"components-component-library-button-base-button-base-stories.adfffb91.iframe.bundle.js","mappings":";AAwBA;AAGA;AAIA;AAOA;AAIA;AAGA;AAEA;AAGA;AAOA;AAKA;AAQA;AAEA;AACA;AAIA;AAIA;AAIA;AACA;AAIA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAIA;AAIA;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAQA;AAMA;AAIA;AACA;AAIA;AAIA;AACA;AAIA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAMA;AAIA;AAGA;AAAA;AAAA;AAEA;AAGA;AAUA;AAIA;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAIA;AAIA;AAGA;AAAA;AAAA;AAEA;AAGA;AAIA;AAIA;AAGA;AAAA;AAAA;AAEA;AAGA;AAUA;AAIA;AAGA;AAAA;AAAA;AAAA;AAEA;AAIA;AAGA;AAAA;AAAA;AAAA;AAEA;AAGA;AAIA;AAIA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAMA;AAEA;AAIA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;ACpCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAkDA;AAAA;AAUA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://metamask-crx/./ui/components/component-library/button-base/README.mdx","webpack://metamask-crx/"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/home/runner/work/metamask-extension/metamask-extension/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Story, Canvas, ArgsTable} from '@storybook/addon-docs';\nimport {ButtonBase} from './button-base';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h3: \"h3\",\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h3, {\n      id: \"this-is-a-base-component-it-should-not-be-used-in-your-feature-code-directly-but-as-a-base-for-other-ui-components\",\n      children: \"This is a base component. It should not be used in your feature code directly but as a \\\"base\\\" for other UI components\"\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"buttonbase\",\n      children: \"ButtonBase\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"ButtonBase\"\n      }), \" is the base component for buttons.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://www.notion.so/MetaMask-Design-System-Guides-Design-f86ecc914d6b4eb6873a122b83c12940\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"MetaMask Design System Guides\"\n      })\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-buttonbase--default-story\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"props\",\n      children: \"Props\"\n    }), \"\\n\", _jsx(ArgsTable, {\n      of: ButtonBase\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"size\",\n      children: \"Size\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"size\"\n      }), \" prop and the \", _jsx(_components.code, {\n        children: \"Size\"\n      }), \" object from \", _jsx(_components.code, {\n        children: \"./ui/helpers/constants/design-system.js\"\n      }), \"\\nto change the size of \", _jsx(_components.code, {\n        children: \"ButtonBase\"\n      }), \". Defaults to \", _jsx(_components.code, {\n        children: \"Size.MD\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Optional: \", _jsx(_components.code, {\n        children: \"BUTTON_BASE_SIZES\"\n      }), \" from \", _jsx(_components.code, {\n        children: \"./button-base\"\n      }), \" object can be used instead of \", _jsx(_components.code, {\n        children: \"Size\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Possible sizes include:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"Size.SM\"\n        }), \" 32px\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"Size.MD\"\n        }), \" 40px\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"Size.LG\"\n        }), \" 48px\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-buttonbase--size-story\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Size } from '../../../helpers/constants/design-system';\\nimport { ButtonBase } from '../../component-library';\\n\\n<ButtonBase size={Size.SM} />\\n<ButtonBase size={Size.MD} />\\n<ButtonBase size={Size.LG} />\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"block\",\n      children: \"Block\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use boolean \", _jsx(_components.code, {\n        children: \"block\"\n      }), \" prop to quickly enable a full width block button\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-buttonbase--block\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { DISPLAY } from '../../../helpers/constants/design-system';\\nimport { ButtonBase } from '../../component-library';\\n\\n<ButtonBase>Default Button</ButtonBase>\\n<ButtonBase block>Block Button</ButtonBase>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"as\",\n      children: \"As\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"as\"\n      }), \" box prop to change the element of \", _jsx(_components.code, {\n        children: \"ButtonBase\"\n      }), \". Defaults to \", _jsx(_components.code, {\n        children: \"button\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When an \", _jsx(_components.code, {\n        children: \"href\"\n      }), \" prop is passed it will change the element to an anchor(\", _jsx(_components.code, {\n        children: \"a\"\n      }), \") tag.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Button \", _jsx(_components.code, {\n        children: \"as\"\n      }), \" options:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"button\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"a\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-buttonbase--as\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { ButtonBase } from '../../component-library';\\n\\n\\n<ButtonBase as=\\\"button\\\">Button Element</ButtonBase>\\n<ButtonBase as=\\\"a\\\" href=\\\"#\\\">\\n  Anchor Element\\n</ButtonBase>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"href\",\n      children: \"Href\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When an \", _jsx(_components.code, {\n        children: \"href\"\n      }), \" prop is passed it will change the element to an anchor(\", _jsx(_components.code, {\n        children: \"a\"\n      }), \") tag.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-buttonbase--href\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { ButtonBase } from '../../component-library';\\n\\n<ButtonBase href=\\\"/metamask\\\">Anchor Element</ButtonBase>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"external-link\",\n      children: \"External link\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When an \", _jsx(_components.code, {\n        children: \"externalLink\"\n      }), \" prop is passed it will change the element to an anchor(\", _jsx(_components.code, {\n        children: \"a\"\n      }), \") tag and add the \", _jsx(_components.code, {\n        children: \"target=\\\"_blank\\\"\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"rel=\\\"noopener noreferrer\\\"\"\n      }), \" attributes.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-buttonbase--external-link\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { ButtonBase } from '../../component-library';\\n\\n<ButtonBase href=\\\"https://metamask.io\\\" externalLink>\\n  Anchor element with external link\\n</ButtonBase>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"disabled\",\n      children: \"Disabled\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the boolean \", _jsx(_components.code, {\n        children: \"disabled\"\n      }), \" prop to disable button\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-buttonbase--disabled\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { ButtonBase } from '../../component-library';\\n\\n<ButtonBase disabled>Disabled Button</ButtonBase>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"loading\",\n      children: \"Loading\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the boolean \", _jsx(_components.code, {\n        children: \"loading\"\n      }), \" prop to set loading spinner\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-buttonbase--loading\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { ButtonBase } from '../../component-library';\\n\\n<ButtonBase loading>Loading Button</ButtonBase>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"icon-name\",\n      children: \"Icon Name\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"startIconName\"\n      }), \" and/or \", _jsx(_components.code, {\n        children: \"endIconName\"\n      }), \" prop with the \", _jsx(_components.code, {\n        children: \"IconName\"\n      }), \" enum from \", _jsx(_components.code, {\n        children: \"./ui/components/component-library\"\n      }), \" to select icon.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-buttonbase--start-icon-name\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { ButtonBase } from '../../component-library';\\nimport { IconName } from '../icon';\\n\\n<ButtonBase startIconName={IconName.AddSquare}>Button</ButtonBase>;\\n\"\n      })\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-buttonbase--end-icon-name\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { ButtonBase } from '../../component-library';\\nimport { IconName } from '../icon';\\n\\n<ButtonBase endIconName={IconName.Arrow2Right}>Button</ButtonBase>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"rtl\",\n      children: \"RTL\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For RTL language support use the \", _jsx(_components.code, {\n        children: \"textDirection\"\n      }), \" prop.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-buttonbase--rtl\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { ButtonBase, IconName, TextDirection } from '../../component-library';\\n\\n<>\\n  <ButtonBase\\n    startIconName={IconName.AddSquare}\\n    endIconName={IconName.Arrow2Right}\\n  >\\n    Button Demo\\n  </ButtonBase>\\n  <ButtonBase\\n    startIconName={IconName.AddSquare}\\n    endIconName={IconName.Arrow2Right}\\n    textDirection={TextDirection.RightToLeft}\\n  >\\n    Button Demo\\n  </ButtonBase>\\n</>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"ellipsis\",\n      children: \"Ellipsis\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the boolean \", _jsx(_components.code, {\n        children: \"ellipsis\"\n      }), \" prop to change the if the \", _jsx(_components.code, {\n        children: \"ButtonBase\"\n      }), \" component to have an ellipsis.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Note: this should only be used for dynamic/user generated content or addresses. Generally, button text should be succinct and only contain one or two words.\"\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-buttonbase--ellipsis\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { ButtonBase } from '../../component-library';\\n\\n<Box style={{ width: 180 }}>\\n  <ButtonBase>This is long text example without ellipsis</ButtonBase>\\n  <ButtonBase ellipsis>This is long text example with ellipsis</ButtonBase>\\n</Box>;\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":[],"sourceRoot":""}