{"version":3,"file":"components-component-library-text-field-text-field-stories.7a388d1e.iframe.bundle.js","mappings":";AAwBA;AAIA;AAOA;AAIA;AAGA;AAEA;AAGA;AAMA;AAEA;AACA;AAIA;AAIA;AAIA;AACA;AAIA;AAIA;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAIA;AAEA;AACA;AAIA;AAIA;AAIA;AACA;AAIA;AAIA;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAQA;AAIA;AAGA;AAAA;AAAA;AAAA;AAEA;AAGA;AAQA;AAIA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAQA;AAIA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAMA;AAKA;AAEA;AACA;AAIA;AAIA;AAIA;AAIA;AAIA;AAIA;AAIA;AAIA;AAIA;AAIA;AAIA;AAIA;AAIA;AAIA;AAIA;AAIA;AAIA;AAIA;AAIA;AAIA;AAIA;AAIA;AAIA;AAIA;AAIA;AACA;AAIA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAIA;AAIA;AAGA;AAAA;AAAA;AAEA;AAGA;AAMA;AAKA;AAGA;AAAA;AAAA;AAEA;AAGA;AAMA;AAIA;AAGA;AAAA;AAAA;AAEA;AAGA;AAMA;AAIA;AAGA;AAAA;AAAA;AAEA;AAGA;AAMA;AAIA;AAGA;AAAA;AAAA;AAEA;AAGA;AAMA;AAIA;AAGA;AAAA;AAAA;AAEA;AAGA;AAUA;AAIA;AAGA;AAAA;AAAA;AAEA;AAGA;AAQA;AAIA;AAGA;AAAA;AAAA;AAAA;AC4BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://metamask-crx/./ui/components/component-library/text-field/README.mdx","webpack://metamask-crx/"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/home/runner/work/metamask-extension/metamask-extension/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Story, Canvas, ArgTypes} from '@storybook/addon-docs';\nimport {TextField} from './text-field';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    h2: \"h2\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"textfield\",\n      children: \"TextField\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"TextField\"\n      }), \" lets user enter a text data into a boxed field. It can sometimes contain related information or controls.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://www.notion.so/MetaMask-Design-System-Guides-Design-f86ecc914d6b4eb6873a122b83c12940\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"MetaMask Design System Guides\"\n      })\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-textfield--default-story\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"props\",\n      children: \"Props\"\n    }), \"\\n\", _jsx(ArgTypes, {\n      of: TextField\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"size\",\n      children: \"Size\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"size\"\n      }), \" prop to set the height of the \", _jsx(_components.code, {\n        children: \"TextField\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Possible sizes include:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"Sm\"\n        }), \" 32px\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"Md\"\n        }), \" 40px\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"Lg\"\n        }), \" 48px\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Defaults to \", _jsx(_components.code, {\n        children: \"md\"\n      })]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-textfield--size-story\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { TextField, TextFieldSize } from '../../component-library';\\n\\n<TextField size={TextFieldSize.Sm} />\\n<TextField size={TextFieldSize.Md} />\\n<TextField size={TextFieldSize.Lg} />\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"type\",\n      children: \"Type\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"type\"\n      }), \" prop to change the type of input.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Possible types include:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"text\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"number\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"password\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Defaults to \", _jsx(_components.code, {\n        children: \"text\"\n      }), \".\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-textfield--type\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { TextField, TextFieldType } from '../../component-library';\\n\\n<TextField  placeholder=\\\"Default\\\" />\\n<TextField  type={TextFieldType.Password} placeholder=\\\"Password\\\" />\\n<TextField  type={TextFieldType.Number} placeholder=\\\"Number\\\" />\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"truncate\",\n      children: \"Truncate\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"truncate\"\n      }), \" prop to truncate the text of the \", _jsx(_components.code, {\n        children: \"TextField\"\n      }), \". Defaults to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \".\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-textfield--truncate\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { TextField } from '../../component-library';\\n\\n<TextField truncate />; // truncate is set to `true` by default\\n<TextField truncate={false} />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"start-accessory-end-accessory\",\n      children: \"Start accessory End Accessory\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"startAccessory\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"endAccessory\"\n      }), \" props to add components such as icons or buttons to either side of the \", _jsx(_components.code, {\n        children: \"TextField\"\n      }), \".\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-textfield--start-accessory-end-accessory\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Color, IconColor, SIZES, DISPLAY } from '../../../helpers/constants/design-system';\\nimport { TextField, Icon, IconName, ButtonIcon } from '../../component-library';\\n\\n<TextField\\n  placeholder=\\\"Search\\\"\\n  startAccessory={\\n    <Icon\\n      color={IconColor.iconAlternative}\\n      name={IconName.Search}\\n    />\\n  }\\n/>\\n\\n<TextField\\n  placeholder=\\\"Public address (0x), or ENS\\\"\\n  endAccessory={\\n    <ButtonIcon\\n      iconName={IconName.ScanBarcode}\\n      ariaLabel=\\\"Scan QR code\\\"\\n      iconProps={{ color: IconColor.primaryDefault }}\\n    />\\n  }\\n/>\\n\\n<TextField\\n  placeholder=\\\"Enter amount\\\"\\n  type=\\\"number\\\"\\n  truncate\\n  startAccessory={<SelectTokenComponent />}\\n  endAccessory={<TokenValueInUSDComponent />}\\n/>\\n\\n<TextField\\n  placeholder=\\\"Public address (0x), or ENS\\\"\\n  truncate\\n  startAccessory={<AvatarAccount />}\\n  endAccessory={\\n    isAddressValid && (\\n      <Icon\\n        name={IconName.Check}\\n        color={IconColor.successDefault}\\n      />\\n    )\\n  }\\n/>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"input-ref\",\n      children: \"Input Ref\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"inputRef\"\n      }), \" prop to access the ref of the \", _jsx(_components.code, {\n        children: \"<input />\"\n      }), \" html element of \", _jsx(_components.code, {\n        children: \"TextField\"\n      }), \". This is useful for focusing the input from a button or other component.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-textfield--input-ref\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Button, TextField } from '../../component-library';\\n\\nconst inputRef = useRef(null);\\nconst [value, setValue] = useState('');\\nconst handleOnClick = () => {\\n  inputRef.current.focus();\\n};\\nconst handleOnChange = (e) => {\\n  setValue(e.target.value);\\n};\\n\\n<TextField\\n  inputRef={inputRef}\\n  value={value}\\n  onChange={handleOnChange}\\n/>\\n<Button marginLeft={1} onClick={handleOnClick}>\\n  Edit\\n</Button>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"input-component\",\n      children: \"Input Component\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"InputComponent\"\n      }), \" prop change the component used for the input element. This is useful for replacing the base input with a custom input while retaining the functionality of the \", _jsx(_components.code, {\n        children: \"TextField\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Defaults to the \", _jsx(_components.a, {\n        href: \"/docs/components-componentlibrary-text--default-story\",\n        children: \"Text\"\n      }), \" component\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To function fully the custom component should accept the following props:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"aria-invalid\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"as\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"autoComplete\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"autoFocus\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"backgroundColor\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"defaultValue\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"disabled\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"focused\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"id\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"margin\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"maxLength\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"name\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"onBlur\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"onChange\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"onFocus\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"padding\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"paddingLeft\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"paddingRight\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"placeholder\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"readOnly\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"ref\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"required\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"value\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"variant\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"type\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-textfield--input-component-story\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { TextField, Icon, IconName } from '../../component-library';\\n\\n// should map the props to the custom input component\\nconst CustomInputComponent = () => <div>{/* Custom input component */}</div>;\\n\\nconst TextFieldCustomInput = (args) => (\\n  <TextField\\n    size={SIZES.LG}\\n    InputComponent={CustomInputComponent}\\n    startAccessory={\\n      <Icon color={IconColor.iconAlternative} name={IconName.Wallet} />\\n    }\\n  />\\n);\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"auto-complete\",\n      children: \"Auto Complete\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"autoComplete\"\n      }), \" prop to set the autocomplete html attribute. It allows the browser to predict the value based on earlier typed values.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-textfield--auto-complete\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { TextField } from '../../component-library';\\n\\n<TextField type=\\\"password\\\" autoComplete />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"auto-focus\",\n      children: \"Auto Focus\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"autoFocus\"\n      }), \" prop to focus the \", _jsx(_components.code, {\n        children: \"TextField\"\n      }), \" during the first mount\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To view story see \", _jsx(_components.a, {\n        href: \"/story/components-componentlibrary-textfield--auto-complete\",\n        children: \"Canvas tab\"\n      }), \". Removing it from docs because created annoying reading experience 😁\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { TextField } from '../../component-library';\\n\\n<TextField autoFocus />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"default-value\",\n      children: \"Default Value\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"defaultValue\"\n      }), \" prop to set the default value of the \", _jsx(_components.code, {\n        children: \"TextField\"\n      })]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-textfield--default-value\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { TextField } from '../../component-library';\\n\\n<TextField defaultValue=\\\"default value\\\" />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"disabled\",\n      children: \"Disabled\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"disabled\"\n      }), \" prop to set the disabled state of the \", _jsx(_components.code, {\n        children: \"TextField\"\n      })]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-textfield--disabled\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { TextField } from '../../component-library';\\n\\n<TextField disabled />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"error\",\n      children: \"Error\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"error\"\n      }), \" prop to set the error state of the \", _jsx(_components.code, {\n        children: \"TextField\"\n      })]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-textfield--error-story\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { TextField } from '../../component-library';\\n\\n<TextField error />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"max-length\",\n      children: \"Max Length\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"maxLength\"\n      }), \" prop to set the maximum allowed input characters for the \", _jsx(_components.code, {\n        children: \"TextField\"\n      })]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-textfield--max-length\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { TextField } from '../../component-library';\\n\\n<TextField maxLength={10} />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"read-only\",\n      children: \"Read Only\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"readOnly\"\n      }), \" prop to set the \", _jsx(_components.code, {\n        children: \"TextField\"\n      }), \" to read only. When \", _jsx(_components.code, {\n        children: \"readOnly\"\n      }), \" is true \", _jsx(_components.code, {\n        children: \"TextField\"\n      }), \" will not have a focus state.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-textfield--read-only\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { TextField } from '../../component-library';\\n\\n<TextField readOnly />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"required\",\n      children: \"Required\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"required\"\n      }), \" prop to set the \", _jsx(_components.code, {\n        children: \"TextField\"\n      }), \" to required. Currently there is no visual difference to the \", _jsx(_components.code, {\n        children: \"TextField\"\n      }), \" when required.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-textfield--required-story\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { TextField } from '../../component-library';\\n\\n// Currently no visual difference\\n<TextField required />;\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":[],"sourceRoot":""}