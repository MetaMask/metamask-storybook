{"version":3,"file":"components-component-library-container-container-stories.73483275.iframe.bundle.js","mappings":";AAwBA;AAEA;AAOA;AAEA;AAGA;AAEA;AAGA;AAMA;AAEA;AACA;AAIA;AAIA;AAIA;AACA;AAEA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACoCA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://metamask-crx/./ui/components/component-library/container/README.mdx","webpack://metamask-crx/"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/home/runner/work/metamask-extension/metamask-extension/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Canvas, Controls} from '@storybook/addon-docs';\nimport * as ContainerStories from './container.stories';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    h3: \"h3\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"container\",\n      children: \"Container\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Containers are used to constrain a content's width to the current breakpoint, while keeping it fluid\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://www.notion.so/MetaMask-Design-System-Guides-Design-f86ecc914d6b4eb6873a122b83c12940\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"MetaMask Design System Guides\"\n      })\n    }), \"\\n\", _jsx(Canvas, {\n      of: ContainerStories.DefaultStory\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"props\",\n      children: \"Props\"\n    }), \"\\n\", _jsx(Controls, {\n      of: ContainerStories.DefaultStory\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"maxwidth\",\n      children: \"MaxWidth\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Using the \", _jsx(_components.code, {\n        children: \"maxWidth\"\n      }), \" prop with \", _jsx(_components.code, {\n        children: \"ContainerMaxWidth\"\n      }), \" enum values, you can set the maximum width of the container\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Possible values are:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"ContainerMaxWidth.Sm\"\n        }), \" (max-width: 360px)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"ContainerMaxWidth.Md\"\n        }), \" (max-width: 480px)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"ContainerMaxWidth.Lg\"\n        }), \" (max-width: 720px)\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Canvas, {\n      of: ContainerStories.MaxWidth\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { BackgroundColor } from '../../../helpers/constants/design-system';\\nimport { Container, ContainerMaxWidth } from '../../component-library';\\n\\n<Container\\n  maxWidth={ContainerMaxWidth.Sm}\\n  backgroundColor={BackgroundColor.primaryMuted}\\n  padding={4}\\n>\\n  Size \\\"sm\\\" container\\n</Container>\\n<Container\\n  maxWidth={ContainerMaxWidth.Md}\\n  backgroundColor={BackgroundColor.successMuted}\\n  padding={4}\\n>\\n  Size \\\"md\\\" container\\n</Container>\\n<Container\\n  maxWidth={ContainerMaxWidth.Lg}\\n  backgroundColor={BackgroundColor.warningMuted}\\n  padding={4}\\n>\\n  Size \\\"lg\\\" container\\n</Container>\\n<Container\\n  backgroundColor={BackgroundColor.errorMuted}\\n  padding={4}\\n>\\n  no max-width container\\n</Container>\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":[],"sourceRoot":""}