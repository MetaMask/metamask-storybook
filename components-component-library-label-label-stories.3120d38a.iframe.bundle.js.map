{"version":3,"file":"components-component-library-label-label-stories.3120d38a.iframe.bundle.js","mappings":";AAyBA;AAIA;AAOA;AAIA;AAGA;AAEA;AAOA;AAEA;AAGA;AAIA;AAIA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAUA;AAIA;AAGA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AAOA;AAOA;AC+EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://metamask-crx/./ui/components/component-library/label/README.mdx","webpack://metamask-crx/"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/home/runner/work/metamask-extension/metamask-extension/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Story, Canvas, ArgsTable} from '@storybook/addon-docs';\nimport {Text} from '../text';\nimport {Label} from './label';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    h2: \"h2\",\n    h3: \"h3\",\n    pre: \"pre\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"label\",\n      children: \"Label\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Label\"\n      }), \" is used to describe the purpose of a form field\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://www.notion.so/MetaMask-Design-System-Guides-Design-f86ecc914d6b4eb6873a122b83c12940\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"MetaMask Design System Guides\"\n      })\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-label--default-story\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"props\",\n      children: \"Props\"\n    }), \"\\n\", _jsx(ArgsTable, {\n      of: Label\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Label\"\n      }), \" accepts all \", _jsx(_components.a, {\n        href: \"/docs/components-componentlibrary-text--default-story#props\",\n        children: \"Text\"\n      }), \" component props\"]\n    }), \"\\n\", _jsx(ArgsTable, {\n      of: Text\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"children\",\n      children: \"Children\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"children\"\n      }), \" of the label can be text or a react node\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-label--children\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { DISPLAY, AlignItems, FLEX_DIRECTION, Size, IconColor } from '../../../helpers/constants/design-system';\\nimport { Label, Icon, IconName, IconSize, TextField } from '../../component-library';\\n\\n<Label>Plain text</Label>\\n<Label display={DISPLAY.FLEX} alignItems={AlignItems.flexStart}>\\n  Text and icon\\n      <Icon\\n        color={IconColor.iconAlternative}\\n        name={IconName.Info}\\n        size={IconSize.Inherit}\\n      />\\n</Label>\\n<Label\\n      display={DISPLAY.INLINE_FLEX}\\n      flexDirection={FLEX_DIRECTION.COLUMN}\\n      alignItems={AlignItems.flexStart}\\n>\\n  Label that wraps an input\\n  <TextField placeholder=\\\"Click label to focus\\\" />\\n</Label>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"html-for\",\n      children: \"Html For\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"htmlFor\"\n      }), \" prop to allow the \", _jsx(_components.code, {\n        children: \"Label\"\n      }), \" to focus on an input with the same id when clicked. The cursor will also change to a \", _jsx(_components.code, {\n        children: \"pointer\"\n      }), \" when the \", _jsx(_components.code, {\n        children: \"htmlFor\"\n      }), \" has a value.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-label--html-for\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Label, TextField } from '../../component-library';\\n\\n<Label htmlFor=\\\"add-network\\\">Add network</Label>\\n<TextField id=\\\"add-network\\\" placeholder=\\\"Enter network name\\\" />\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"internal-resources\",\n      children: \"Internal Resources\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.figma.com/file/HKpPKij9V3TpsyMV1TpV7C/branch/7uyrueQIFQBLqo9uzkxclr/DS-Components?node-id=13879%3A38076&t=dBHjnJTMSVE8N2UP-1\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"Figma component\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.figma.com/file/aGW8sk6X6Jf9ac0MRMD4kX/TextField-Audit?node-id=282%3A22&t=ZgCGFwGOBmOwQR5c-1\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"Insight report\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":[],"sourceRoot":""}