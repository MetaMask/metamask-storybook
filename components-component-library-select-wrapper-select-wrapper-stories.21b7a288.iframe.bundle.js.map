{"version":3,"file":"components-component-library-select-wrapper-select-wrapper-stories.21b7a288.iframe.bundle.js","mappings":";AAssources":["webpack://metamask-crx/./ui/components/component-library/select-wrapper/README.mdx","webpack://metamask-crx/"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/home/runner/work/metamask-extension/metamask-extension/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Story, Canvas, ArgsTable} from '@storybook/addon-docs';\nimport {SelectWrapper} from './select-wrapper';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    h2: \"h2\",\n    h3: \"h3\",\n    pre: \"pre\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"selectwrapper\",\n      children: \"SelectWrapper\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"SelectWrapper\"\n      }), \" wraps and handles the state and logic for \", _jsx(_components.code, {\n        children: \"SelectOption\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"SelectButton\"\n      })]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-selectwrapper--default-story\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"props\",\n      children: \"Props\"\n    }), \"\\n\", _jsx(ArgsTable, {\n      of: SelectWrapper\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"triggercomponent\",\n      children: \"triggerComponent\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"triggerComponent\"\n      }), \" prop to pass in a component that will be used as the trigger for the \", _jsx(_components.code, {\n        children: \"SelectWrapper\"\n      }), \".\\n\", _jsx(_components.code, {\n        children: \"SelectButton\"\n      }), \" is a component that can be used as the \", _jsx(_components.code, {\n        children: \"triggerComponent\"\n      }), \" or used for reference when creating a custom \", _jsx(_components.code, {\n        children: \"triggerComponent\"\n      }), \".\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-selectwrapper--trigger-component\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import {\\n  SelectWrapper,\\n  SelectButton,\\n  SelectOption,\\n} from '../../component-library';\\n\\n<SelectWrapper\\n  triggerComponent={<SelectButton>Trigger Component</SelectButton>}\\n>\\n  <SelectOption value=\\\"Value\\\">Value</SelectOption>\\n</SelectWrapper>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"children\",\n      children: \"Children\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Elements passed in as children will be used in the \", _jsx(_components.code, {\n        children: \"Popover\"\n      }), \"(dropdown) for the \", _jsx(_components.code, {\n        children: \"SelectWrapper\"\n      }), \".\\n\", _jsx(_components.code, {\n        children: \"SelectOption\"\n      }), \" is a component that can be used as a child or used for reference when creating a custom child.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-selectwrapper--children\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import {\\n  SelectWrapper,\\n  SelectButton,\\n  SelectOption,\\n  Text,\\n} from '../../component-library';\\n\\n<SelectWrapper\\n  triggerComponent={<SelectButton>Trigger Component</SelectButton>}\\n>\\n  <Text paddingLeft={2} paddingRight={2}>\\n    All elements contained in SelectWrapper will be rendered within the popover\\n  </Text>\\n  <SelectOption value=\\\"Child 1\\\">Child 1</SelectOption>\\n  <SelectOption value=\\\"Child 2\\\">Child 2</SelectOption>\\n  <SelectOption value=\\\"Child 3\\\">Child 3</SelectOption>\\n</SelectWrapper>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"controlled-open-isopen-onopenchange\",\n      children: \"Controlled Open (isOpen, onOpenChange)\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For a controlled open experience use the \", _jsx(_components.code, {\n        children: \"isOpen\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"onOpenChange\"\n      }), \" props.\\nPass a boolean to \", _jsx(_components.code, {\n        children: \"isOpen\"\n      }), \" to control the open state of the \", _jsx(_components.code, {\n        children: \"SelectWrapper\"\n      }), \".\\nPass a function to \", _jsx(_components.code, {\n        children: \"onOpenChange\"\n      }), \" to handle the open state of the \", _jsx(_components.code, {\n        children: \"SelectWrapper\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"/docs/components-componentlibrary-selectwrapper--docs#ismultiselect\",\n        children: \"isMultiSelect\"\n      }), \" for more info on how it impacts the onOpenChange.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-selectwrapper--controlled-open\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import {\\n  SelectWrapper,\\n  SelectButton,\\n  SelectOption,\\n} from '../../component-library';\\n\\nconst [isOpen, setIsOpen] = React.useState(false);\\n\\n<SelectWrapper\\n  isOpen={isOpen}\\n  onOpenChange={setIsOpen}\\n  triggerComponent={\\n    <SelectButton onClick={() => setIsOpen(!isOpen)}>\\n      Controlled Open Demo\\n    </SelectButton>\\n  }\\n>\\n  <SelectOption value=\\\"Option 1\\\">Option 1</SelectOption>\\n  <SelectOption value=\\\"Option 2\\\">Option 2</SelectOption>\\n  <SelectOption value=\\\"Option 3\\\">Option 3</SelectOption>\\n</SelectWrapper>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"uncontrolled-open\",\n      children: \"Uncontrolled Open\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"SelectWrapper\"\n      }), \" will control the open state internally if the \", _jsx(_components.code, {\n        children: \"isOpen\"\n      }), \" prop is not passed. By default the \", _jsx(_components.code, {\n        children: \"SelectButton\"\n      }), \" will toggle the open/close state and when selecting an option with \", _jsx(_components.code, {\n        children: \"SelectOption\"\n      }), \" that will trigger a close.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"/docs/components-componentlibrary-selectwrapper--docs#ismultiselect\",\n        children: \"isMultiSelect\"\n      }), \" for more info on how it impacts the open state.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-selectwrapper--uncontrolled-open\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import {\\n  SelectWrapper,\\n  SelectButton,\\n  SelectOption,\\n} from '../../component-library';\\n\\n<SelectWrapper\\n  triggerComponent={<SelectButton>Uncontrolled Open Demo</SelectButton>}\\n>\\n  <SelectOption value=\\\"Option 1\\\">Option 1</SelectOption>\\n  <SelectOption value=\\\"Option 2\\\">Option 2</SelectOption>\\n  <SelectOption value=\\\"Option 3\\\">Option 3</SelectOption>\\n</SelectWrapper>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"controlled-value-value-onvaluechange-defaultvalue\",\n      children: \"Controlled Value (value, onValueChange, defaultValue)\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For a controlled value dev experience use the \", _jsx(_components.code, {\n        children: \"value\"\n      }), \", \", _jsx(_components.code, {\n        children: \"onValueChange\"\n      }), \", and \", _jsx(_components.code, {\n        children: \"defaultValue\"\n      }), \" props.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-selectwrapper--controlled-value\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import {\\n  SelectWrapper,\\n  SelectButton,\\n  SelectOption,\\n} from '../../component-library';\\n\\nconst [controlledValue, setControlledValue] = React.useState('');\\n\\n<SelectWrapper\\n  defaultValue={'DefaultValue'}\\n  value={controlledValue}\\n  onValueChange={(value) => setControlledValue(value)}\\n  triggerComponent={<SelectButton>Controlled </SelectButton>}\\n>\\n  <SelectOption value=\\\"Option 1\\\">Option 1</SelectOption>\\n  <SelectOption value=\\\"Option 2\\\">Option 2</SelectOption>\\n  <SelectOption value=\\\"Option 3\\\">Option 3</SelectOption>\\n</SelectWrapper>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"uncontrolled-value\",\n      children: \"Uncontrolled Value\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default the \", _jsx(_components.code, {\n        children: \"SelectWrapper\"\n      }), \" will control the value internally if the \", _jsx(_components.code, {\n        children: \"value\"\n      }), \" prop is not passed.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When using \", _jsx(_components.code, {\n        children: \"SelectOption\"\n      }), \" as a child of \", _jsx(_components.code, {\n        children: \"SelectWrapper\"\n      }), \" the \", _jsx(_components.code, {\n        children: \"value\"\n      }), \" prop of \", _jsx(_components.code, {\n        children: \"SelectOption\"\n      }), \" will be used as the value of the \", _jsx(_components.code, {\n        children: \"SelectWrapper\"\n      }), \" when selected.\\nAdditionally when using \", _jsx(_components.code, {\n        children: \"SelectButton\"\n      }), \" it will display the value of the \", _jsx(_components.code, {\n        children: \"SelectWrapper\"\n      }), \".\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-selectwrapper--uncontrolled-value\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import {\\n  SelectWrapper,\\n  SelectButton,\\n  SelectOption,\\n} from '../../component-library';\\n\\n<SelectWrapper\\n  triggerComponent={<SelectButton>Uncontrolled Example</SelectButton>}\\n>\\n  <SelectOption value=\\\"Option 1\\\">Option 1</SelectOption>\\n  <SelectOption value=\\\"Option 2\\\">Option 2</SelectOption>\\n  <SelectOption value=\\\"Option 3\\\">Option 3</SelectOption>\\n</SelectWrapper>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"ismultiselect\",\n      children: \"isMultiSelect\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Setting the \", _jsx(_components.code, {\n        children: \"isMultiSelect\"\n      }), \" to true will disabled the controlled open and uncontrolled open behavior of the \", _jsx(_components.code, {\n        children: \"SelectWrapper\"\n      }), \".\\nWhen \", _jsx(_components.code, {\n        children: \"isMultiSelect\"\n      }), \" is true the \", _jsx(_components.code, {\n        children: \"SelectWrapper\"\n      }), \" will not control the open state internally and will not close when an option is selected.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-selectwrapper--is-multi-select\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import {\\n  SelectWrapper,\\n  SelectButton,\\n  SelectOption,\\n} from '../../component-library';\\n\\n<SelectWrapper\\n  isMultiSelect\\n  triggerComponent={<SelectButton>Demo</SelectButton>}\\n>\\n  <SelectOption value=\\\"Option 1\\\">Option 1</SelectOption>\\n  <SelectOption value=\\\"Option 2\\\">Option 2</SelectOption>\\n  <SelectOption value=\\\"Option 3\\\">Option 3</SelectOption>\\n</SelectWrapper>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"useselectcontext\",\n      children: \"useSelectContext\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When building a component to be used inside \", _jsx(_components.code, {\n        children: \"SelectWrapper\"\n      }), \" you can use \", _jsx(_components.code, {\n        children: \"useSelectContext\"\n      }), \" to access the \", _jsx(_components.code, {\n        children: \"SelectWrapper\"\n      }), \" state and logic.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-selectwrapper--use-select-context\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import {\\n  SelectWrapper,\\n  SelectButton,\\n  SelectOption,\\n  useSelectContext,\\n} from '../../component-library';\\n\\nconst CustomClose = () => {\\n  const { toggleUncontrolledOpen } = useSelectContext();\\n\\n  return (\\n    <>\\n      <Text>Custom close button using SelectContext</Text>\\n      <Button block onClick={toggleUncontrolledOpen}>\\n        Close\\n      </Button>\\n    </>\\n  );\\n};\\n\\n<SelectWrapper\\n  triggerComponent={<SelectButton>Uncontrolled Example</SelectButton>}\\n>\\n  <CustomClose />\\n  <SelectOption value=\\\"Option 1\\\">Option 1</SelectOption>\\n  <SelectOption value=\\\"Option 2\\\">Option 2</SelectOption>\\n  <SelectOption value=\\\"Option 3\\\">Option 3</SelectOption>\\n</SelectWrapper>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"placeholder\",\n      children: \"Placeholder\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"placeholder\"\n      }), \" prop to set the placeholder value in \", _jsx(_components.code, {\n        children: \"SelectWrapper\"\n      }), \" to be accessed for components within it.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-selectwrapper--placeholder\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import {\\n  SelectWrapper,\\n  SelectButton,\\n  SelectOption,\\n} from '../../component-library';\\n\\n<SelectWrapper placeholder=\\\"This is a placeholder\\\" />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"isdisabled\",\n      children: \"isDisabled\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"isDisabled\"\n      }), \" prop to set the disable \", _jsx(_components.code, {\n        children: \"SelectWrapper\"\n      }), \" so it can be accessed to components within it.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-selectwrapper--is-disabled\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import {\\n  SelectWrapper,\\n  SelectButton,\\n  SelectOption,\\n} from '../../component-library';\\n\\n<SelectWrapper isDisabled triggerComponent={<SelectButton>Demo</SelectButton>}>\\n  <SelectOption value=\\\"Option 1\\\">Option 1</SelectOption>\\n  <SelectOption value=\\\"Option 2\\\">Option 2</SelectOption>\\n  <SelectOption value=\\\"Option 3\\\">Option 3</SelectOption>\\n</SelectWrapper>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"isdanger\",\n      children: \"isDanger\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"isDanger\"\n      }), \" prop to set the danger \", _jsx(_components.code, {\n        children: \"SelectWrapper\"\n      }), \" so it can be accessed to components within it.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-selectwrapper--is-danger\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import {\\n  SelectWrapper,\\n  SelectButton,\\n  SelectOption,\\n} from '../../component-library';\\n\\n<SelectWrapper isDanger triggerComponent={<SelectButton>Demo</SelectButton>}>\\n  <SelectOption value=\\\"Option 1\\\">Option 1</SelectOption>\\n  <SelectOption value=\\\"Option 2\\\">Option 2</SelectOption>\\n  <SelectOption value=\\\"Option 3\\\">Option 3</SelectOption>\\n</SelectWrapper>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"popoverprops\",\n      children: \"popoverProps\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"popoverProps\"\n      }), \" prop to pass props to the \", _jsx(_components.code, {\n        children: \"Popover\"\n      }), \" component that wraps the \", _jsx(_components.code, {\n        children: \"SelectWrapper\"\n      }), \" children.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-selectwrapper--popover-props\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import {\\n  SelectWrapper,\\n  SelectButton,\\n  SelectOption,\\n} from '../../component-library';\\nimport { BackgroundColor } from '../../../helpers/constants/design-system';\\n\\n<SelectWrapper\\n  popoverProps={{\\n    backgroundColor: BackgroundColor.goerli,\\n    padding: 4,\\n    isPortal: false,\\n  }}\\n  triggerComponent={<SelectButton>Demo</SelectButton>}\\n>\\n  <SelectOption value=\\\"Option 1\\\">Option 1</SelectOption>\\n  <SelectOption value=\\\"Option 2\\\">Option 2</SelectOption>\\n  <SelectOption value=\\\"Option 3\\\">Option 3</SelectOption>\\n</SelectWrapper>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"onblur\",\n      children: \"onBlur\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default onBlur is setup to close the \", _jsx(_components.code, {\n        children: \"SelectWrapper\"\n      }), \" when the user clicks outside of the \", _jsx(_components.code, {\n        children: \"SelectWrapper\"\n      }), \" or when the user tabs out of the \", _jsx(_components.code, {\n        children: \"SelectWrapper\"\n      }), \".\\nYou can use the \", _jsx(_components.code, {\n        children: \"onBlur\"\n      }), \" prop to pass a custom function to handle the onBlur event. This will override the default onBlur behavior and will require you to have setup a controlled open environment as well.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The onBlur fires based on the if the Popover is open or closed and is disconnected from the trigger component.\"\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-selectwrapper--on-blur\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import {\\n  SelectWrapper,\\n  SelectButton,\\n  SelectOption,\\n} from '../../component-library';\\n\\nconst [onBlur, setOnBlur] = React.useState(0);\\n\\n<SelectWrapper\\n  onBlur={() => setOnBlur(onBlur + 1)}\\n  triggerComponent={<SelectButton>onBlur Count: {onBlur}</SelectButton>}\\n>\\n  <Text>This is a demo of controlled onBlur.</Text>\\n</SelectWrapper>;\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":[],"sourceRoot":""}