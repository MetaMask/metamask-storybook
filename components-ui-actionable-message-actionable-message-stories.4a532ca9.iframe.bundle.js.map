{"version":3,"file":"components-ui-actionable-message-actionable-message-stories.4a532ca9.iframe.bundle.js","mappings":";;;;;;;;AAmBA;AAEA;AAIA;AAGA;AAEA;AAGA;AAEA;AAIA;AAGA;AAEA;AAIA;AAGA;AAEA;AAIA;AAGA;AAEA;ACgKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AA4DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://metamask-crx/./ui/components/ui/actionable-message/README.mdx","webpack://metamask-crx/"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/home/runner/work/metamask-extension/metamask-extension/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Story, Canvas, ArgsTable} from '@storybook/addon-docs';\nimport ActionableMessage from '.';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"actionable-message\",\n      children: \"Actionable Message\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Popup component that give the user information. Actionable Message component can generate a tooltip and a maximum of two action buttons.\"\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-ui-actionablemessage--default-story\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"props\",\n      children: \"Props\"\n    }), \"\\n\", _jsx(ArgsTable, {\n      of: ActionableMessage\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"one-action\",\n      children: \"One Action\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Add actionable message component with one button\"\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-ui-actionablemessage--one-action\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"two-actions\",\n      children: \"Two Actions\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Add actionable message component with two buttons\"\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-ui-actionablemessage--two-actions\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"left-aligned\",\n      children: \"Left Aligned\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Align actionable message component's text to left\"\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-ui-actionablemessage--left-aligned\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"with-icon\",\n      children: \"With Icon\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Add tooltip icon to the left of the component\"\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-ui-actionablemessage--with-icon\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":[],"sourceRoot":""}