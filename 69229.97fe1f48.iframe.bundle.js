"use strict";(globalThis.webpackChunkmetamask_crx=globalThis.webpackChunkmetamask_crx||[]).push([[69229],{"./test/jest/mocks.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{H5:()=>createMockInternalAccount,rV:()=>getSelectedInternalAccountFromMockState});var dist=__webpack_require__("./node_modules/@metamask/keyring-api/dist/index.mjs"),KeyringController=__webpack_require__("./node_modules/@metamask/keyring-controller/dist/KeyringController.mjs"),v4=__webpack_require__("./node_modules/uuid/dist/esm-browser/v4.js"),types=__webpack_require__("./node_modules/@metamask/superstruct/dist/structs/types.mjs");function keyringTypeToName(keyringType){switch(keyringType){case KeyringController.rI.simple:case KeyringController.rI.hd:return"Account";case KeyringController.rI.trezor:return"Trezor";case KeyringController.rI.oneKey:return"OneKey";case KeyringController.rI.ledger:return"Ledger";case KeyringController.rI.lattice:return"Lattice";case KeyringController.rI.qr:return"QR";case KeyringController.rI.snap:return"Snap Account";default:throw Error(`Unknown keyring ${keyringType}`)}}__webpack_require__("./node_modules/ethereum-cryptography/esm/sha256.js"),(0,types.NW)({entropySource:(0,types.Yj)(),index:(0,types.ai)(),derivationPath:(0,types.Yj)()});var send=__webpack_require__("./ui/ducks/send/index.js"),accounts=__webpack_require__("./shared/lib/multichain/accounts.ts");function _define_property(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _object_spread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{},ownKeys=Object.keys(source);"function"==typeof Object.getOwnPropertySymbols&&(ownKeys=ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym){return Object.getOwnPropertyDescriptor(source,sym).enumerable}))),ownKeys.forEach(function(key){_define_property(target,key,source[key])})}return target}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable})),keys.push.apply(keys,symbols)}return keys}function createMockInternalAccount(){var scopes,methods,_ref=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},id=_ref.id,_ref_name=_ref.name,name=void 0===_ref_name?"Account 1":_ref_name,_ref_address=_ref.address,address=void 0===_ref_address?"0xd5e099c71b797516c10ed0f0d895f429c2781111":_ref_address,_ref_type=_ref.type,type=void 0===_ref_type?dist.j0.Eoa:_ref_type,_ref_keyringType=_ref.keyringType,keyringType=void 0===_ref_keyringType?KeyringController.rI.hd:_ref_keyringType,_ref_lastSelected=_ref.lastSelected,_ref_snapOptions=_ref.snapOptions,_ref_options=_ref.options,options=void 0===_ref_options?void 0:_ref_options;switch(type){case dist.j0.Eoa:scopes=[dist.OO.Eoa],methods=[dist.F.PersonalSign,dist.F.SignTransaction,dist.F.SignTypedDataV1,dist.F.SignTypedDataV3,dist.F.SignTypedDataV4];break;case dist.j0.Erc4337:scopes=[dist.OO.Testnet],methods=[dist.F.PatchUserOperation,dist.F.PrepareUserOperation,dist.F.SignUserOperation];break;case dist.fi.P2wpkh:scopes=[address&&(0,accounts.C2)(address)?dist.um.Mainnet:dist.um.Testnet],methods=Object.values(dist.Dj);break;case dist.Ux.DataAccount:scopes=[dist.Zx.Mainnet,dist.Zx.Testnet,dist.Zx.Devnet],methods=[dist.CG.SendAndConfirmTransaction];break;default:throw Error("Unknown account type: ".concat(type))}return{address:address,id:null!=id?id:(0,v4.A)(),metadata:{name:null!=name?name:"".concat(keyringTypeToName(keyringType)," 1"),importTime:Date.now(),keyring:{type:keyringType},snap:keyringType===KeyringController.rI.snap?void 0===_ref_snapOptions?{enabled:!0,id:"npm:snap-id",name:"snap-name"}:_ref_snapOptions:void 0,lastSelected:void 0===_ref_lastSelected?0:_ref_lastSelected},options:null!=options?options:{},scopes:scopes,methods:methods,type:type}}(function _object_spread_props(target,source){return source=null!=source?source:{},Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))})})(_object_spread({},send.ue),{currentTransactionUUID:"test-uuid",draftTransactions:{"test-uuid":_object_spread({},send.zv)}});var getSelectedInternalAccountFromMockState=function(state){return state.metamask.internalAccounts.accounts[state.metamask.internalAccounts.selectedAccount]}}}]);