{"version":3,"file":"components-component-library-picker-network-picker-network-stories.6efc2b19.iframe.bundle.js","mappings":";AAsBA;AAIA;AAOA;AAIA;AAGA;AAEA;AAGA;AAgBA;AAIA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAgBA;AAIA;AAGA;AAAA;AAAA;AAAA;AAEA;AAGA;AAUA;AAIA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AC4CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://metamask-crx/./ui/components/component-library/picker-network/README.mdx","webpack://metamask-crx/"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/home/runner/work/metamask-extension/metamask-extension/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Story, Canvas, ArgsTable} from '@storybook/addon-docs';\nimport {PickerNetwork} from './picker-network';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    h2: \"h2\",\n    h3: \"h3\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"pickernetwork\",\n      children: \"PickerNetwork\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"PickerNetwork\"\n      }), \" is used for the action of changing a network.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://www.notion.so/MetaMask-Design-System-Guides-Design-f86ecc914d6b4eb6873a122b83c12940\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"MetaMask Design System Guides\"\n      })\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-pickernetwork--default-story\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"props\",\n      children: \"Props\"\n    }), \"\\n\", _jsx(ArgsTable, {\n      of: PickerNetwork\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"label\",\n      children: \"Label\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"label\"\n      }), \" prop for the text content of the \", _jsx(_components.code, {\n        children: \"PickerNetwork\"\n      }), \" component. For long labels set a \", _jsx(_components.code, {\n        children: \"max-width\"\n      }), \" using a \", _jsx(_components.code, {\n        children: \"className\"\n      }), \" and the text will truncate showing an ellipsis. If the \", _jsx(_components.code, {\n        children: \"src\"\n      }), \" prop is not set, the \", _jsx(_components.code, {\n        children: \"label\"\n      }), \" prop will be used to generate fallback initial for \", _jsx(_components.code, {\n        children: \"AvatarNetwork\"\n      }), \".\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-pickernetwork--label\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { PickerNetwork } from '../../ui/component-library';\\n<PickerNetwork src=\\\"./images/avax-token.svg\\\" label=\\\"Avalanche C-Chain\\\" />\\n<PickerNetwork label=\\\"Arbitrum One\\\" />\\n<PickerNetwork label=\\\"Polygon Mainnet\\\" />\\n<PickerNetwork label=\\\"Optimism\\\" />\\n<PickerNetwork label=\\\"BNB Smart Chain (previously Binance Smart Chain Mainnet)\\\" style={{ maxWidth: '200px' }} />\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"src\",\n      children: \"Src\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"src\"\n      }), \" prop with an image url to render the \", _jsx(_components.code, {\n        children: \"AvatarNetwork\"\n      }), \". Use the \", _jsx(_components.code, {\n        children: \"avatarNetworkProps\"\n      }), \" to pass additional props to the \", _jsx(_components.code, {\n        children: \"AvatarNetwork\"\n      }), \" component. If the \", _jsx(_components.code, {\n        children: \"src\"\n      }), \" prop is not set, the \", _jsx(_components.code, {\n        children: \"label\"\n      }), \" prop will be used to generate fallback initial for \", _jsx(_components.code, {\n        children: \"AvatarNetwork\"\n      }), \".\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-pickernetwork--src\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { PickerNetwork } from '../../ui/component-library';\\n<PickerNetwork src=\\\"./images/arbitrum.svg\\\" label=\\\"Arbitrum One\\\" />\\n<PickerNetwork src=\\\"./images/pol-token.svg\\\" label=\\\"Polygon Mainnet\\\" />\\n<PickerNetwork src=\\\"./images/optimism.svg\\\" label=\\\"Optimism\\\" />\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"width\",\n      children: \"Width\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The width of the \", _jsx(_components.code, {\n        children: \"PickerNetwork\"\n      }), \" is set to auto by default. Use the style utility \", _jsx(_components.code, {\n        children: \"width\"\n      }), \" prop with the \", _jsx(_components.code, {\n        children: \"BlockSize\"\n      }), \" enum to set the width of the \", _jsx(_components.code, {\n        children: \"PickerNetwork\"\n      }), \" component.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-pickernetwork--width\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { PickerNetwork } from '../../ui/component-library';\\nimport { BlockSize } from '../../../helpers/constants/design-system';\\n\\n<PickerNetwork src=\\\"./images/avax-token.svg\\\" label=\\\"Avalanche C-Chain\\\" />;\\n<PickerNetwork\\n  src=\\\"./images/avax-token.svg\\\"\\n  label=\\\"Avalanche C-Chain\\\"\\n  width={BlockSize.Full}\\n/>;\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":[],"sourceRoot":""}