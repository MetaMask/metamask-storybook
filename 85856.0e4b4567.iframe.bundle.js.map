{"version":3,"file":"85856.0e4b4567.iframe.bundle.js","mappings":";AAsCA","sources":["webpack://metamask-crx/./ui/components/app/metamask-translation/metamask-translation.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport MetaMaskTemplateRenderer from '../metamask-template-renderer';\nimport { SectionShape } from '../metamask-template-renderer/section-shape';\n\n/**\n * MetaMaskTranslation is a simple helper component for adding full translation\n * support to the template system. We do pass the translation function to the\n * template getValues function, but passing it React components as variables\n * would require React to be in scope, and breaks the object pattern paradigm.\n *\n * This component gets around that by converting variables that are templates\n * themselves into tiny React trees. This component does additional validation\n * to make sure that the tree has a single root node, with maximum two leaves.\n * Each subnode can have a maximum of one child that must be a string.\n *\n * This enforces a maximum recursion depth of 2, preventing translation strings\n * from being performance hogs. We could further limit this, and also attenuate\n * the safeComponentList for what kind of components we allow these special\n * trees to contain.\n *\n * @param options\n * @param options.translationKey\n * @param options.variables\n */\nexport default function MetaMaskTranslation({ translationKey, variables }) {\n  const t = useI18nContext();\n\n  return t(\n    translationKey,\n    variables?.map((variable) => {\n      if (\n        typeof variable === 'object' &&\n        !Array.isArray(variable) &&\n        variable.element\n      ) {\n        if (!variable.key) {\n          throw new Error(\n            `When using MetaMask Template Language in a MetaMaskTranslation variable, you must provide a key for the section regardless of syntax.\n            Section with element '${variable.element}' for translationKey: '${translationKey}' has no key property`,\n          );\n        }\n        if (\n          variable.children &&\n          Array.isArray(variable.children) &&\n          variable.children.length > 2\n        ) {\n          throw new Error(\n            'MetaMaskTranslation only renders templates with a single section and maximum two children',\n          );\n        } else if (\n          (variable.children?.[0]?.children !== undefined &&\n            typeof variable.children[0].children !== 'string') ||\n          (variable.children?.[1]?.children !== undefined &&\n            typeof variable.children[1].children !== 'string')\n        ) {\n          throw new Error(\n            'MetaMaskTranslation does not allow for component trees of non trivial depth',\n          );\n        }\n        return (\n          <MetaMaskTemplateRenderer\n            key={`${translationKey}-${variable.key}`}\n            sections={variable}\n          />\n        );\n      }\n      return variable;\n    }),\n  );\n}\n\nMetaMaskTranslation.propTypes = {\n  /**\n   * Translation object key\n   */\n  translationKey: PropTypes.string.isRequired,\n  /**\n   * Array of variables for the MetaMaskTranslation component\n   */\n  variables: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n      PropTypes.shape(SectionShape),\n    ]),\n  ),\n};\n"],"names":[],"sourceRoot":""}