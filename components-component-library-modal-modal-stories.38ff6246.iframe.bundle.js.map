{"version":3,"file":"components-component-library-modal-modal-stories.38ff6246.iframe.bundle.js","mappings":";AAwsources":["webpack://metamask-crx/./ui/components/component-library/modal/README.mdx","webpack://metamask-crx/"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/home/runner/work/metamask-extension/metamask-extension/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Story, Canvas, ArgsTable} from '@storybook/addon-docs';\nimport {Modal} from './modal';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    h2: \"h2\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"modal\",\n      children: \"Modal\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"Modal\"\n      }), \" focuses the user's attention exclusively on information via a window that is overlaid on primary content. It should be used with the \", _jsx(_components.code, {\n        children: \"ModalOverlay\"\n      }), \", \", _jsx(_components.code, {\n        children: \"ModalContent\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"ModalHeader\"\n      }), \" components to create a complete modal.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://www.notion.so/MetaMask-Design-System-Guides-Design-f86ecc914d6b4eb6873a122b83c12940\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"MetaMask Design System Guides\"\n      })\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-modal--default-story\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"props\",\n      children: \"Props\"\n    }), \"\\n\", _jsx(ArgsTable, {\n      of: Modal\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"usage\",\n      children: \"Usage\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"Modal\"\n      }), \" component is a very atomic level component that is meant to be used with \", _jsx(_components.code, {\n        children: \"ModalOverlay\"\n      }), \", \", _jsx(_components.code, {\n        children: \"ModalContent\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"ModalHeader\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When the modal opens:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Focus is trapped within the modal and set to the first tabbable element.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Content behind a modal dialog is inert, meaning that users cannot interact with it.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Use the \", _jsx(_components.code, {\n          children: \"isOpen\"\n        }), \" prop to control whether the modal is open or closed.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Use the \", _jsx(_components.code, {\n          children: \"onClose\"\n        }), \" prop to fire a callback when the modal is closed. This is used for the \", _jsx(_components.code, {\n          children: \"isClosedOnOutsideClick\"\n        }), \" prop and the \", _jsx(_components.code, {\n          children: \"isClosedOnEscapeKey\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-modal--usage\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import React, { useState, useRef } from 'react';\\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalBody, ModalFooter, Text, Button } from '../../component-library';\\n\\nconst [open, setOpen] = useState(false);\\n\\nconst handleOnClick = () => {\\n  setOpen(true);\\n};\\n\\nconst handleOnClose = () => {\\n  setOpen(false);\\n};\\n\\n<Button onClick={handleOnClick}>OpenModal</Button>\\n<Modal\\n  isOpen={open}\\n  onClose={handleOnClose}\\n>\\n  <ModalOverlay />\\n  <ModalContent>\\n    <ModalHeader onClose={handleOnClose} onBack={handleOnClose}>\\n      Modal Header\\n    </ModalHeader>\\n    <ModalBody>\\n      <Text>ModalBody children</Text>\\n    </ModalBody>\\n    <ModalFooter onSubmit={handleOnClose} onCancel={handleOnCancel}>\\n  </ModalContent>\\n</Modal>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"is-closed-on-outside-click\",\n      children: \"Is Closed On Outside Click\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"isClosedOnOutsideClick\"\n      }), \" prop to control whether the modal should close when the user clicks outside of the modal.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Defaults to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \".\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-modal--is-closed-on-outside-click\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Modal } from '../../component-library';\\n\\n<Modal isClosedOnOutsideClick={false} />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"is-closed-on-escape-key\",\n      children: \"Is Closed On Escape Key\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"isClosedOnEscapeKey\"\n      }), \" prop to control whether the modal should close when the user presses the escape key.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Defaults to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \".\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-modal--is-closed-on-escape-key\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Modal } from '../../component-library';\\n\\n<Modal isClosedOnEscapeKey={false} />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"initial-focus-ref\",\n      children: \"Initial Focus Ref\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"initialFocusRef\"\n      }), \" to set the \", _jsx(_components.code, {\n        children: \"ref\"\n      }), \" of the element to receive focus initially. This is useful for input elements that should receive focus when the modal opens.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-modal--initial-focus-ref\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import React, { useState, useRef } from 'react';\\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalBody, TextFieldSearch, Button } from '../../component-library';\\n\\n// Ref to set initial focus\\nconst inputRef = React.useRef<HTMLDivElement>(null);\\n\\nconst [open, setOpen] = useState(false);\\n\\nconst handleOnClick = () => {\\n  setOpen(true);\\n};\\n\\nconst handleOnClose = () => {\\n  setOpen(false);\\n};\\n\\n<Button onClick={handleOnClick}>Open modal</Button>\\n<Modal\\n  isOpen={isOpen}\\n  onClose={handleOnClose}\\n  initialFocusRef={inputRef}\\n>\\n  <ModalOverlay />\\n  <ModalContent >\\n    <ModalHeader\\n      onClose={handleOnClose}\\n      onBack={handleOnClose}\\n      marginBottom={4}\\n    >\\n      Modal Header\\n    </ModalHeader>\\n    <TextFieldSearch\\n      placeholder=\\\"Search\\\"\\n      inputProps={{ ref: inputRef }}\\n      width={BLOCK_SIZES.FULL}\\n    />\\n    <ModalBody>\\n      <Text>ModalBody children</Text>\\n    </ModalBody>\\n  </ModalContent>\\n</Modal>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"final-focus-ref\",\n      children: \"Final Focus Ref\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"finalFocusRef\"\n      }), \" to set the \", _jsx(_components.code, {\n        children: \"ref\"\n      }), \" of the element to receive focus when the modal closes.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-modal--final-focus-ref\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import React, { useState, useRef } from 'react';\\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, TextFieldSearch, Button } from '../../component-library';\\n\\n// Ref to set focus after modal closes\\nconst buttonRef = React.useRef<HTMLButtonElement>(null);\\n\\nconst [open, setOpen] = useState(false);\\n\\nconst handleOnClick = () => {\\n  setOpen(true);\\n};\\n\\nconst handleOnClose = () => {\\n  setOpen(false);\\n};\\n\\n<Button onClick={handleOnClick} marginRight={4}>\\n  Open modal\\n</Button>\\n<button ref={buttonRef}>Receives focus after close</button>\\n<Modal\\n  isOpen={isOpen}\\n  onClose={handleOnClose}\\n  finalFocusRef={buttonRef}\\n>\\n  <ModalOverlay />\\n  <ModalContent >\\n    <ModalHeader\\n      onClose={handleOnClose}\\n      onBack={handleOnClose}\\n      marginBottom={4}\\n    >\\n      Modal Header\\n    </ModalHeader>\\n    <ModalBody>\\n      <Text>ModalBody children</Text>\\n    </ModalBody>\\n  </ModalContent>\\n</Modal>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"restore-focus\",\n      children: \"Restore Focus\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"restoreFocus\"\n      }), \" prop to restore focus to the element that triggered the \", _jsx(_components.code, {\n        children: \"Modal\"\n      }), \" once it unmounts\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Defaults to \", _jsx(_components.code, {\n        children: \"false\"\n      })]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-modal--restore-focus\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Modal } from '../../component-library';\\n\\n<Modal restoreFocus={true} />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"auto-focus\",\n      children: \"Auto Focus\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If \", _jsx(_components.code, {\n        children: \"true\"\n      }), \", the first focusable element within the \", _jsx(_components.code, {\n        children: \"children\"\n      }), \" will auto-focused once \", _jsx(_components.code, {\n        children: \"Modal\"\n      }), \" mounts. Depending on the content of \", _jsx(_components.code, {\n        children: \"Modal\"\n      }), \" this is usually the back or close button in the \", _jsx(_components.code, {\n        children: \"ModalHeader\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Defaults to \", _jsx(_components.code, {\n        children: \"true\"\n      })]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-modal--auto-focus\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Modal } from '../../component-library';\\n\\n<Modal autoFocus={false} />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"accessibility\",\n      children: \"Accessibility\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"keyboard-and-focus-management\",\n      children: \"Keyboard and Focus Management\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"When the modal opens, focus is trapped within it.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"When the modal opens, focus is automatically set to the first enabled element, or the element from \", _jsx(_components.code, {\n          children: \"initialFocusRef\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"When the modal closes, focus returns to the element that was focused before the modal activated, or the element from \", _jsx(_components.code, {\n          children: \"finalFocusRef\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Clicking on the overlay closes the Modal.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Pressing ESC closes the Modal.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Scrolling is blocked on the elements behind the modal.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"The modal is rendered in a portal attached to the end of document.body to break it out of the source order and make it easy to add aria-hidden to its siblings.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"aria\",\n      children: \"ARIA\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"ModalContent\"\n        }), \" has aria-modal=\\\"true\\\" and role=\\\"dialog\\\"\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"ModalOverlay\"\n        }), \" has aria-hidden=\\\"true\\\"\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":[],"sourceRoot":""}