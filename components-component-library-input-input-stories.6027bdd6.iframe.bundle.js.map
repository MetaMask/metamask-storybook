{"version":3,"file":"components-component-library-input-input-stories.6027bdd6.iframe.bundle.js","mappings":";AAyBA;AAOA;AAOA;AAIA;AAGA;AAEA;AAGA;AAIA;AAEA;AACA;AAIA;AAIA;AAIA;AAIA;AACA;AAIA;AAIA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAQA;AAIA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAIA;AAIA;AAGA;AAAA;AAAA;AAEA;AAGA;AAMA;AAKA;AAGA;AAAA;AAAA;AAEA;AAGA;AAMA;AAIA;AAGA;AAAA;AAAA;AAEA;AAGA;AAMA;AAIA;AAGA;AAAA;AAAA;AAEA;AAGA;AAQA;AAIA;AAGA;AAAA;AAAA;AAEA;AAGA;AAMA;AAIA;AAGA;AAAA;AAAA;AAEA;AAGA;AAMA;AAIA;AAGA;AAAA;AAAA;AAEA;AAGA;AAQA;AAIA;AAGA;AAAA;AAAA;AAAA;AAEA;AAGA;AAIA;AAGA;AAMA;AAIA;AAGA;AAAA;AAAA;AAEA;AAGA;AAMA;AAGA;AAEA;AAIA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AC6EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://metamask-crx/./ui/components/component-library/input/README.mdx","webpack://metamask-crx/"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/home/runner/work/metamask-extension/metamask-extension/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Story, Canvas, ArgsTable} from '@storybook/addon-docs';\nimport {Input} from './input';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    h2: \"h2\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"input\",\n      children: \"Input\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Input\"\n      }), \" lets user enter a text data. It‚Äôs a light-weighted borderless input used inside of custom inputs. See \", _jsx(_components.a, {\n        href: \"/docs/components-componentlibrary-textfield--default-story#textfield\",\n        children: \"TextField\"\n      }), \" for common text input.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://www.notion.so/MetaMask-Design-System-Guides-Design-f86ecc914d6b4eb6873a122b83c12940\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"MetaMask Design System Guides\"\n      })\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-input--default-story\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"props\",\n      children: \"Props\"\n    }), \"\\n\", _jsx(ArgsTable, {\n      of: Input\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"type\",\n      children: \"Type\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"type\"\n      }), \" prop to change the type of input.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Possible types include:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"InputType.Text\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"InputType.Number\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"InputType.Password\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"InputType.Search\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Defaults to \", _jsx(_components.code, {\n        children: \"InputType.Text\"\n      }), \".\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-input--type\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Input, InputType } from '../../component-library';\\n\\n<Input type={InputType.Text} />\\n<Input type={InputType.Number} />\\n<Input type={InputType.Password} />\\n<Input type={InputType.Search} />\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"ref\",\n      children: \"Ref\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"ref\"\n      }), \" prop to access the ref of the \", _jsx(_components.code, {\n        children: \"<input />\"\n      }), \" html element of \", _jsx(_components.code, {\n        children: \"Input\"\n      }), \". This is useful for focusing the input from a button or other component.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-input--ref\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Button, Input } from '../../component-library';\\n\\nconst inputRef = useRef(null);\\nconst [value, setValue] = useState('');\\nconst handleOnClick = () => {\\n  inputRef.current.focus();\\n};\\nconst handleOnChange = (e) => {\\n  setValue(e.target.value);\\n};\\n\\n<Input\\n  ref={inputRef}\\n  value={value}\\n  onChange={handleOnChange}\\n/>\\n<Button marginLeft={1} onClick={handleOnClick}>\\n  Edit\\n</Button>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"auto-complete\",\n      children: \"Auto Complete\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"autoComplete\"\n      }), \" prop to set the autocomplete html attribute. It allows the browser to predict the value based on earlier typed values.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-input--auto-complete\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Input, InputType } from '../../component-library';\\n\\n<Input type={InputType.Password} autoComplete />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"auto-focus\",\n      children: \"Auto Focus\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"autoFocus\"\n      }), \" prop to focus the \", _jsx(_components.code, {\n        children: \"Input\"\n      }), \" during the first mount\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To view story see \", _jsx(_components.a, {\n        href: \"/story/components-componentlibrary-input--auto-focus\",\n        children: \"Canvas tab\"\n      }), \". Removing it from docs because created annoying reading experience üòÅ\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Input } from '../../component-library';\\n\\n<Input autoFocus />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"default-value\",\n      children: \"Default Value\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"defaultValue\"\n      }), \" prop to set the default value of the \", _jsx(_components.code, {\n        children: \"Input\"\n      }), \". Used for uncontrolled inputs.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-input--default-value\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Input } from '../../component-library';\\n\\n<Input defaultValue=\\\"default value\\\" />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"disabled\",\n      children: \"Disabled\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"disabled\"\n      }), \" prop to set the disabled state of the \", _jsx(_components.code, {\n        children: \"Input\"\n      })]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-input--disabled\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Input } from '../../component-library';\\n\\n<Input disabled />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"error\",\n      children: \"Error\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"error\"\n      }), \" prop to set \", _jsx(_components.code, {\n        children: \"aria-invalid=\\\"true\\\"\"\n      }), \". This helps with screen readers for accessibility. There is no visual indicator for \", _jsx(_components.code, {\n        children: \"error\"\n      }), \" this should be handled in the parent component.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-input--error-story\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Input } from '../../component-library';\\n\\n<Input error />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"max-length\",\n      children: \"Max Length\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"maxLength\"\n      }), \" prop to set the maximum allowed input characters for the \", _jsx(_components.code, {\n        children: \"Input\"\n      })]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-input--max-length\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Input } from '../../component-library';\\n\\n<Input maxLength={10} />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"read-only\",\n      children: \"Read Only\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"readOnly\"\n      }), \" prop to set the \", _jsx(_components.code, {\n        children: \"Input\"\n      }), \" to read only\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-input--read-only\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Input } from '../../component-library';\\n\\n<Input readOnly />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"required\",\n      children: \"Required\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"required\"\n      }), \" prop to set the html \", _jsx(_components.code, {\n        children: \"required\"\n      }), \" attribute used by the browser api. There is no visual indicator for \", _jsx(_components.code, {\n        children: \"required\"\n      }), \" this should be handled in the parent component.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-input--required\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Input } from '../../component-library';\\n\\n// No visual indicator. Used by the browser api\\n<Input required />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"disable-style-states\",\n      children: \"Disable Style States\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"disableStyleStates\"\n      }), \" to remove disabled and focus styles\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"important-note\",\n      children: \"IMPORTANT NOTE\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This sets the CSS to \", _jsx(_components.code, {\n        children: \"outline: none\"\n      }), \" so ensure there is a proper fallback to enable accessibility for keyboard only and vision impaired users. Check \", _jsx(_components.code, {\n        children: \"TextField\"\n      }), \" source code to see how it is done properly.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-input--disable-state-styles\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Input } from '../../component-library';\\n\\n<Input disableStyleStates />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"text-variant\",\n      children: \"Text Variant\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"textVariant\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"TextVariant\"\n      }), \" enum to change the font size and style of the input\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"important-note-1\",\n      children: \"IMPORTANT NOTE\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This should RARELY be used but it is available for custom inputs that require larger text\"\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-input--text-variant-story\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { TextVariant } from '../../../helpers/constants/design-system';\\nimport { Input } from '../../component-library';\\n\\n<Input\\n  value={value}\\n  onChange={handleOnChange}\\n  textVariant={TextVariant.displayMd}\\n/>\\n<Input\\n  value={value}\\n  onChange={handleOnChange}\\n  textVariant={TextVariant.headingLg}\\n/>\\n<Input\\n  value={value}\\n  onChange={handleOnChange}\\n  textVariant={TextVariant.headingMd}\\n/>\\n<Input\\n  value={value}\\n  onChange={handleOnChange}\\n  textVariant={TextVariant.headingSm}\\n/>\\n<Input\\n  value={value}\\n  onChange={handleOnChange}\\n  textVariant={TextVariant.bodyLgMedium}\\n/>\\n<Input\\n  value={value}\\n  onChange={handleOnChange}\\n  textVariant={TextVariant.bodyMdBold}\\n/>\\n<Input\\n  value={value}\\n  onChange={handleOnChange}\\n  textVariant={TextVariant.bodyMd}\\n/>\\n<Input\\n  value={value}\\n  onChange={handleOnChange}\\n  textVariant={TextVariant.bodySm}\\n/>\\n<Input\\n  value={value}\\n  onChange={handleOnChange}\\n  textVariant={TextVariant.bodySmBold}\\n/>\\n<Input\\n  value={value}\\n  onChange={handleOnChange}\\n  textVariant={TextVariant.bodyXs}\\n/>\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":[],"sourceRoot":""}