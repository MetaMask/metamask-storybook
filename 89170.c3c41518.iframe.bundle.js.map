{"version":3,"file":"89170.c3c41518.iframe.bundle.js","mappings":";AAuOA;AAKA","sources":["webpack://metamask-crx/./ui/components/app/wallet-overview/coin-buttons.tsx"],"sourcesContent":["import React, { useCallback, useContext, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { toHex } from '@metamask/controller-utils';\nimport { isCaipChainId, CaipChainId } from '@metamask/utils';\nimport { getNativeAssetForChainId } from '@metamask/bridge-controller';\n\n///: BEGIN:ONLY_INCLUDE_IF(multichain)\nimport { isEvmAccountType } from '@metamask/keyring-api';\nimport { InternalAccount } from '@metamask/keyring-internal-api';\n///: END:ONLY_INCLUDE_IF\nimport { ChainId } from '../../../../shared/constants/network';\n\nimport { I18nContext } from '../../../contexts/i18n';\n\nimport {\n  PREPARE_SWAP_ROUTE,\n  MULTICHAIN_ACCOUNT_ADDRESS_LIST_PAGE_ROUTE,\n} from '../../../helpers/constants/routes';\nimport {\n  AddressListQueryParams,\n  AddressListSource,\n} from '../../../pages/multichain-accounts/multichain-account-address-list-page';\nimport {\n  getCurrentKeyring,\n  getUseExternalServices,\n  getNetworkConfigurationIdByChainId,\n  isNonEvmAccount,\n  getSwapsDefaultToken,\n} from '../../../selectors';\nimport { getIsMultichainAccountsState2Enabled } from '../../../selectors/multichain-accounts/feature-flags';\nimport { getSelectedAccountGroup } from '../../../selectors/multichain-accounts/account-tree';\nimport Tooltip from '../../ui/tooltip';\nimport { setSwapsFromToken } from '../../../ducks/swaps/swaps';\nimport { isHardwareKeyring } from '../../../helpers/utils/hardware';\nimport {\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n  MetaMetricsSwapsEventSource,\n} from '../../../../shared/constants/metametrics';\nimport { AssetType } from '../../../../shared/constants/transaction';\nimport { MetaMetricsContext } from '../../../contexts/metametrics';\nimport { startNewDraftTransaction } from '../../../ducks/send';\nimport {\n  BlockSize,\n  Display,\n  IconColor,\n  JustifyContent,\n} from '../../../helpers/constants/design-system';\nimport { Box, Icon, IconName, IconSize } from '../../component-library';\nimport IconButton from '../../ui/icon-button';\nimport useRamps from '../../../hooks/ramps/useRamps/useRamps';\nimport useBridging from '../../../hooks/bridge/useBridging';\nimport {\n  getIsUnifiedUIEnabled,\n  type BridgeAppState,\n} from '../../../ducks/bridge/selectors';\nimport { ReceiveModal } from '../../multichain/receive-modal';\nimport { setActiveNetworkWithError } from '../../../store/actions';\nimport {\n  getMultichainIsTestnet,\n  getMultichainNativeCurrency,\n  getMultichainNetwork,\n} from '../../../selectors/multichain';\nimport { useMultichainSelector } from '../../../hooks/useMultichainSelector';\nimport { getCurrentChainId } from '../../../../shared/modules/selectors/networks';\nimport { MultichainNetworks } from '../../../../shared/constants/multichain/networks';\nimport { trace, TraceName } from '../../../../shared/lib/trace';\nimport { navigateToSendRoute } from '../../../pages/confirmations/utils/send';\n///: BEGIN:ONLY_INCLUDE_IF(multichain)\nimport { useHandleSendNonEvm } from './hooks/useHandleSendNonEvm';\n///: END:ONLY_INCLUDE_IF\n\ntype CoinButtonsProps = {\n  account: InternalAccount;\n  chainId: `0x${string}` | CaipChainId | number;\n  trackingLocation: string;\n  isSwapsChain: boolean;\n  isSigningEnabled: boolean;\n  isBridgeChain: boolean;\n  isBuyableChain: boolean;\n  classPrefix?: string;\n  iconButtonClassName?: string;\n};\n\nconst CoinButtons = ({\n  account,\n  chainId,\n  trackingLocation,\n  isSwapsChain,\n  isSigningEnabled,\n  isBridgeChain,\n  isBuyableChain,\n  classPrefix = 'coin',\n}: CoinButtonsProps) => {\n  const t = useContext(I18nContext);\n  const dispatch = useDispatch();\n\n  const trackEvent = useContext(MetaMetricsContext);\n  const [showReceiveModal, setShowReceiveModal] = useState(false);\n\n  const { address: selectedAddress } = account;\n  const history = useHistory();\n  const networks = useSelector(getNetworkConfigurationIdByChainId) as Record<\n    string,\n    string\n  >;\n  const currentChainId = useSelector(getCurrentChainId);\n  const displayNewIconButtons = process.env.REMOVE_GNS;\n\n  // Multichain accounts feature flag and selected account group\n  const isMultichainAccountsState2Enabled = useSelector(\n    getIsMultichainAccountsState2Enabled,\n  );\n  const selectedAccountGroup = useSelector(getSelectedAccountGroup);\n\n  const defaultSwapsToken = useSelector((state) =>\n    getSwapsDefaultToken(state, chainId.toString()),\n  );\n\n  // Pre-conditions\n  if (isSwapsChain && defaultSwapsToken === undefined) {\n    throw new Error('defaultSwapsToken is required');\n  }\n\n  ///: BEGIN:ONLY_INCLUDE_IF(multichain)\n  const handleSendNonEvm = useHandleSendNonEvm();\n  ///: END:ONLY_INCLUDE_IF\n\n  const location = useLocation();\n  const keyring = useSelector(getCurrentKeyring);\n  const usingHardwareWallet = isHardwareKeyring(keyring?.type);\n\n  // Initially, those events were using a \"ETH\" as `token_symbol`, so we keep this behavior\n  // for EVM, no matter the currently selected native token (e.g. SepoliaETH if you are on Sepolia\n  // network).\n  const { isEvmNetwork, chainId: multichainChainId } = useMultichainSelector(\n    getMultichainNetwork,\n    account,\n  );\n  const multichainNativeToken = useMultichainSelector(\n    getMultichainNativeCurrency,\n    account,\n  );\n  const nativeToken = isEvmNetwork ? 'ETH' : multichainNativeToken;\n\n  const isExternalServicesEnabled = useSelector(getUseExternalServices);\n\n  const isTestnet = useSelector(getMultichainIsTestnet);\n\n  const isNonEvmAccountWithoutExternalServices =\n    !isExternalServicesEnabled && isNonEvmAccount(account);\n\n  const buttonTooltips = {\n    buyButton: [{ condition: !isBuyableChain, message: '' }],\n    sendButton: [\n      { condition: !isSigningEnabled, message: 'methodNotSupported' },\n    ],\n    swapButton: [\n      { condition: !isSwapsChain, message: 'currentlyUnavailable' },\n      { condition: !isSigningEnabled, message: 'methodNotSupported' },\n    ],\n    bridgeButton: [\n      { condition: !isBridgeChain, message: 'currentlyUnavailable' },\n      { condition: !isSigningEnabled, message: 'methodNotSupported' },\n    ],\n  };\n\n  const generateTooltip = (\n    buttonKey: keyof typeof buttonTooltips,\n    contents: React.ReactElement,\n  ) => {\n    const conditions = buttonTooltips[buttonKey];\n    const tooltipInfo = conditions.find(({ condition }) => condition);\n    if (tooltipInfo?.message) {\n      return (\n        <Tooltip\n          title={t(tooltipInfo.message)}\n          position=\"bottom\"\n          wrapperClassName=\"tooltip-button-wrapper\"\n        >\n          {contents}\n        </Tooltip>\n      );\n    }\n    return contents;\n  };\n\n  const getChainId = (): CaipChainId | ChainId => {\n    if (isCaipChainId(chainId)) {\n      return chainId as CaipChainId;\n    }\n    // Otherwise we assume that's an EVM chain ID, so use the usual 0x prefix\n    return toHex(chainId) as ChainId;\n  };\n\n  const getSnapAccountMetaMetricsPropertiesIfAny = (\n    internalAccount: InternalAccount,\n    // TODO: Fix in https://github.com/MetaMask/metamask-extension/issues/31860\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n  ): { snap_id?: string } => {\n    // Some accounts might be Snap accounts, in this case we add some extra properties\n    // to the metrics:\n    const snapId = internalAccount.metadata.snap?.id;\n    if (snapId) {\n      return {\n        // TODO: Fix in https://github.com/MetaMask/metamask-extension/issues/31860\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        snap_id: snapId,\n      };\n    }\n\n    // If the account is not a Snap account or that we could not get the Snap ID for\n    // some reason, we don't add any extra property.\n    return {};\n  };\n\n  const { openBuyCryptoInPdapp } = useRamps();\n\n  const { openBridgeExperience } = useBridging();\n\n  const isUnifiedUIEnabled = useSelector((state: BridgeAppState) =>\n    getIsUnifiedUIEnabled(state, chainId),\n  );\n\n  const setCorrectChain = useCallback(async () => {\n    if (currentChainId !== chainId && multichainChainId !== chainId) {\n      try {\n        const networkConfigurationId = networks[chainId];\n        await dispatch(setActiveNetworkWithError(networkConfigurationId));\n      } catch (err) {\n        console.error(`Failed to switch chains.\n        Target chainId: ${chainId}, Current chainId: ${currentChainId}.\n        ${\n          // TODO: Fix in https://github.com/MetaMask/metamask-extension/issues/31893\n          // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n          err\n        }`);\n        throw err;\n      }\n    }\n  }, [currentChainId, chainId, networks, dispatch]);\n\n  const handleSendOnClick = useCallback(async () => {\n    trackEvent(\n      {\n        event: MetaMetricsEventName.NavSendButtonClicked,\n        category: MetaMetricsEventCategory.Navigation,\n        properties: {\n          // TODO: Fix in https://github.com/MetaMask/metamask-extension/issues/31860\n          // eslint-disable-next-line @typescript-eslint/naming-convention\n          account_type: account.type,\n          // TODO: Fix in https://github.com/MetaMask/metamask-extension/issues/31860\n          // eslint-disable-next-line @typescript-eslint/naming-convention\n          token_symbol: nativeToken,\n          location: 'Home',\n          text: 'Send',\n          // TODO: Fix in https://github.com/MetaMask/metamask-extension/issues/31860\n          // eslint-disable-next-line @typescript-eslint/naming-convention\n          chain_id: chainId,\n          ...getSnapAccountMetaMetricsPropertiesIfAny(account),\n        },\n      },\n      { excludeMetaMetricsId: false },\n    );\n\n    ///: BEGIN:ONLY_INCLUDE_IF(multichain)\n    if (!isEvmAccountType(account.type) && !process.env.SEND_REDESIGN_ENABLED) {\n      await handleSendNonEvm();\n      // Early return, not to let the non-EVM flow slip into the native send flow.\n      return;\n    }\n    ///: END:ONLY_INCLUDE_IF\n\n    // Native Send flow\n    await setCorrectChain();\n    await dispatch(startNewDraftTransaction({ type: AssetType.native }));\n    let params;\n    if (trackingLocation !== 'home') {\n      params = { chainId: chainId.toString() };\n    }\n    navigateToSendRoute(history, params);\n  }, [\n    chainId,\n    account,\n    setCorrectChain,\n    ///: BEGIN:ONLY_INCLUDE_IF(multichain)\n    handleSendNonEvm,\n    ///: END:ONLY_INCLUDE_IF\n    trackingLocation,\n  ]);\n\n  const handleBuyAndSellOnClick = useCallback(() => {\n    openBuyCryptoInPdapp(getChainId());\n    trackEvent({\n      event: MetaMetricsEventName.NavBuyButtonClicked,\n      category: MetaMetricsEventCategory.Navigation,\n      properties: {\n        // TODO: Fix in https://github.com/MetaMask/metamask-extension/issues/31860\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        account_type: account.type,\n        location: 'Home',\n        text: 'Buy',\n        // TODO: Fix in https://github.com/MetaMask/metamask-extension/issues/31860\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        chain_id: chainId,\n        // TODO: Fix in https://github.com/MetaMask/metamask-extension/issues/31860\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        token_symbol: defaultSwapsToken,\n        ...getSnapAccountMetaMetricsPropertiesIfAny(account),\n      },\n    });\n  }, [chainId, defaultSwapsToken]);\n\n  const handleBridgeOnClick = useCallback(\n    async (isSwap: boolean) => {\n      await setCorrectChain();\n      // Handle clicking from the wallet overview page\n      openBridgeExperience(\n        MetaMetricsSwapsEventSource.MainView,\n        getNativeAssetForChainId(chainId),\n        isSwap,\n      );\n    },\n    [location, openBridgeExperience],\n  );\n\n  const handleSwapOnClick = useCallback(async () => {\n    if (isUnifiedUIEnabled) {\n      handleBridgeOnClick(true);\n      return;\n    }\n    if (multichainChainId === MultichainNetworks.SOLANA) {\n      handleBridgeOnClick(true);\n      return;\n    }\n\n    await setCorrectChain();\n\n    if (isSwapsChain) {\n      trackEvent({\n        event: MetaMetricsEventName.NavSwapButtonClicked,\n        category: MetaMetricsEventCategory.Swaps,\n        properties: {\n          // TODO: Fix in https://github.com/MetaMask/metamask-extension/issues/31860\n          // eslint-disable-next-line @typescript-eslint/naming-convention\n          token_symbol: 'ETH',\n          location: MetaMetricsSwapsEventSource.MainView,\n          text: 'Swap',\n          // TODO: Fix in https://github.com/MetaMask/metamask-extension/issues/31860\n          // eslint-disable-next-line @typescript-eslint/naming-convention\n          chain_id: chainId,\n        },\n      });\n      dispatch(setSwapsFromToken(defaultSwapsToken));\n      if (usingHardwareWallet) {\n        if (global.platform.openExtensionInBrowser) {\n          global.platform.openExtensionInBrowser(PREPARE_SWAP_ROUTE);\n        }\n      } else {\n        history.push(PREPARE_SWAP_ROUTE);\n      }\n    }\n  }, [\n    setCorrectChain,\n    isSwapsChain,\n    chainId,\n    isUnifiedUIEnabled,\n    usingHardwareWallet,\n    defaultSwapsToken,\n  ]);\n\n  const handleReceiveOnClick = useCallback(() => {\n    trace({ name: TraceName.ReceiveModal });\n    trackEvent({\n      event: MetaMetricsEventName.NavReceiveButtonClicked,\n      category: MetaMetricsEventCategory.Navigation,\n      properties: {\n        text: 'Receive',\n        location: trackingLocation,\n        // TODO: Fix in https://github.com/MetaMask/metamask-extension/issues/31860\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        chain_id: chainId,\n      },\n    });\n\n    if (isMultichainAccountsState2Enabled && selectedAccountGroup) {\n      // Navigate to the multichain address list page with receive source\n      history.push(\n        `${MULTICHAIN_ACCOUNT_ADDRESS_LIST_PAGE_ROUTE}/${encodeURIComponent(selectedAccountGroup)}?${AddressListQueryParams.Source}=${AddressListSource.Receive}`,\n      );\n    } else {\n      // Show the traditional receive modal\n      setShowReceiveModal(true);\n    }\n  }, [\n    isMultichainAccountsState2Enabled,\n    selectedAccountGroup,\n    history,\n    trackEvent,\n    trackingLocation,\n    chainId,\n  ]);\n\n  return (\n    <Box\n      display={Display.Flex}\n      justifyContent={JustifyContent.spaceBetween}\n      width={BlockSize.Full}\n      gap={3}\n    >\n      {\n        <IconButton\n          className={`${classPrefix}-overview__button`}\n          Icon={\n            displayNewIconButtons ? (\n              <Icon\n                name={IconName.Money}\n                color={IconColor.iconAlternative}\n                size={IconSize.Md}\n              />\n            ) : (\n              <Icon\n                name={IconName.PlusAndMinus}\n                color={IconColor.iconDefault}\n                size={IconSize.Sm}\n              />\n            )\n          }\n          disabled={!isBuyableChain}\n          data-testid={`${classPrefix}-overview-buy`}\n          label={t('buyAndSell')}\n          onClick={handleBuyAndSellOnClick}\n          width={BlockSize.Full}\n          tooltipRender={(contents: React.ReactElement) =>\n            generateTooltip('buyButton', contents)\n          }\n        />\n      }\n      <IconButton\n        className={`${classPrefix}-overview__button`}\n        disabled={\n          (!isSwapsChain && !isUnifiedUIEnabled) ||\n          !isSigningEnabled ||\n          !isExternalServicesEnabled\n        }\n        Icon={\n          displayNewIconButtons ? (\n            <Icon\n              name={IconName.SwapHorizontal}\n              color={IconColor.iconAlternative}\n              size={IconSize.Md}\n            />\n          ) : (\n            <Icon\n              name={IconName.SwapHorizontal}\n              color={IconColor.iconDefault}\n              size={IconSize.Sm}\n            />\n          )\n        }\n        onClick={handleSwapOnClick}\n        label={t('swap')}\n        data-testid=\"token-overview-button-swap\"\n        width={BlockSize.Full}\n        tooltipRender={(contents: React.ReactElement) =>\n          generateTooltip('swapButton', contents)\n        }\n      />\n      {/* the bridge button is redundant if unified ui is enabled, testnet or non-bridge chain (unsupported) */}\n      {isUnifiedUIEnabled ||\n      isTestnet ||\n      !isBridgeChain ||\n      isNonEvmAccountWithoutExternalServices ? null : (\n        <IconButton\n          className={`${classPrefix}-overview__button`}\n          disabled={\n            !isBridgeChain ||\n            !isSigningEnabled ||\n            isNonEvmAccountWithoutExternalServices\n          }\n          data-testid={`${classPrefix}-overview-bridge`}\n          Icon={\n            displayNewIconButtons ? (\n              <Icon\n                name={IconName.Bridge}\n                color={IconColor.iconAlternative}\n                size={IconSize.Md}\n              />\n            ) : (\n              <Icon\n                name={IconName.Bridge}\n                color={IconColor.iconDefault}\n                size={IconSize.Sm}\n              />\n            )\n          }\n          label={t('bridge')}\n          onClick={() => handleBridgeOnClick(false)}\n          width={BlockSize.Full}\n          tooltipRender={(contents: React.ReactElement) =>\n            generateTooltip('bridgeButton', contents)\n          }\n        />\n      )}\n      <IconButton\n        className={`${classPrefix}-overview__button`}\n        data-testid={`${classPrefix}-overview-send`}\n        Icon={\n          displayNewIconButtons ? (\n            <Icon\n              name={IconName.Send}\n              color={IconColor.iconAlternative}\n              size={IconSize.Md}\n            />\n          ) : (\n            <Icon\n              name={IconName.Arrow2UpRight}\n              color={IconColor.iconDefault}\n              size={IconSize.Sm}\n            />\n          )\n        }\n        disabled={!isSigningEnabled || isNonEvmAccountWithoutExternalServices}\n        label={t('send')}\n        onClick={handleSendOnClick}\n        width={BlockSize.Full}\n        tooltipRender={(contents: React.ReactElement) =>\n          generateTooltip('sendButton', contents)\n        }\n      />\n      {\n        <>\n          {showReceiveModal && (\n            <ReceiveModal\n              address={selectedAddress}\n              onClose={() => setShowReceiveModal(false)}\n            />\n          )}\n          <IconButton\n            className={`${classPrefix}-overview__button`}\n            data-testid={`${classPrefix}-overview-receive`}\n            Icon={\n              displayNewIconButtons ? (\n                <Icon\n                  name={IconName.QrCode}\n                  color={IconColor.iconAlternative}\n                  size={IconSize.Md}\n                />\n              ) : (\n                <Icon\n                  name={IconName.ScanBarcode}\n                  color={IconColor.iconDefault}\n                  size={IconSize.Sm}\n                />\n              )\n            }\n            label={t('receive')}\n            width={BlockSize.Full}\n            onClick={handleReceiveOnClick}\n          />\n        </>\n      }\n    </Box>\n  );\n};\n\nexport default CoinButtons;\n"],"names":[],"sourceRoot":""}