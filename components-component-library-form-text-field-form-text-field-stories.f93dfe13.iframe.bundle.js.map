{"version":3,"file":"components-component-library-form-text-field-form-text-field-stories.f93dfe13.iframe.bundle.js","mappings":";AAuBA;AAaA;AAOA;AAIA;AAGA;AAOA;AAEA;AAMA;AACA;AAEA;AAMA;AACA;AAEA;AAGA;AAoBA;AAIA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAgBA;AAIA;AAGA;AAAA;AAAA;AAEA;AAGA;AAogBA;AAIA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACsJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://metamask-crx/./ui/components/component-library/form-text-field/README.mdx","webpack://metamask-crx/"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/home/runner/work/metamask-extension/metamask-extension/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Story, Canvas, ArgsTable} from '@storybook/addon-docs';\nimport {TextField} from '../';\nimport {FormTextField} from './form-text-field';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    h2: \"h2\",\n    h3: \"h3\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"formtextfield\",\n      children: \"FormTextField\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"FormTextField\"\n      }), \" is an input component to create forms. It bundles the \", _jsx(_components.a, {\n        href: \"/docs/components-componentlibrary-textfield--default-story\",\n        children: \"TextField\"\n      }), \", \", _jsx(_components.a, {\n        href: \"/docs/components-componentlibrary-label--default-story\",\n        children: \"Label\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"/docs/components-componentlibrary-helptext--default-story\",\n        children: \"HelpText\"\n      }), \" components together.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://www.notion.so/MetaMask-Design-System-Guides-Design-f86ecc914d6b4eb6873a122b83c12940\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"MetaMask Design System Guides\"\n      })\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-formtextfield--default-story\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"props\",\n      children: \"Props\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"FormTextField\"\n      }), \" accepts all props below as well as all \", _jsx(_components.a, {\n        href: \"/docs/components-ui-box--default-story#props\",\n        children: \"Box\"\n      }), \" component props\"]\n    }), \"\\n\", _jsx(ArgsTable, {\n      of: FormTextField\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"FormTextField\"\n      }), \" accepts all \", _jsx(_components.a, {\n        href: \"/docs/components-componentlibrary-textfield--default-story#props\",\n        children: \"TextField\"\n      }), \"\\ncomponent props\"]\n    }), \"\\n\", _jsx(ArgsTable, {\n      of: TextField\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"FormTextField\"\n      }), \" accepts all \", _jsx(_components.a, {\n        href: \"/docs/components-componentlibrary-textfield--default-story#props\",\n        children: \"TextField\"\n      }), \"\\ncomponent props\"]\n    }), \"\\n\", _jsx(ArgsTable, {\n      of: TextField\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"id\",\n      children: \"Id\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"id\"\n      }), \" prop to set the \", _jsx(_components.code, {\n        children: \"id\"\n      }), \" of the \", _jsx(_components.code, {\n        children: \"FormTextField\"\n      }), \" component. This is required for accessibility when the \", _jsx(_components.code, {\n        children: \"label\"\n      }), \" prop is set. It is also used internally to link the \", _jsx(_components.code, {\n        children: \"label\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"input\"\n      }), \" elements using \", _jsx(_components.code, {\n        children: \"htmlFor\"\n      }), \", so clicking on the \", _jsx(_components.code, {\n        children: \"label\"\n      }), \" will focus the \", _jsx(_components.code, {\n        children: \"input\"\n      }), \".\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-formtextfield--id\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { FormTextField } from '../../component-library';\\n\\n<FormTextField\\n  id=\\\"accessible-input-id\\\"\\n  label=\\\"If label prop exists id prop is required for accessibility\\\"\\n/>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"label\",\n      children: \"Label\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"label\"\n      }), \" prop to add a label to the \", _jsx(_components.code, {\n        children: \"FormTextField\"\n      }), \" component. Uses the \", _jsx(_components.a, {\n        href: \"/docs/components-componentlibrary-label--default-story\",\n        children: \"Label\"\n      }), \" component. Use the \", _jsx(_components.code, {\n        children: \"labelProps\"\n      }), \" prop to pass props to the \", _jsx(_components.code, {\n        children: \"Label\"\n      }), \" component. To use a custom label component see the \", _jsx(_components.a, {\n        href: \"#custom-label-or-helptext\",\n        children: \"Custom Label or HelpText\"\n      }), \" story example.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-formtextfield--label-story\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { FormTextField } from '../../component-library';\\n\\n<FormTextField id=\\\"input-with-label\\\" label=\\\"Label content appears here\\\" />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"helptext\",\n      children: \"HelpText\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"helpText\"\n      }), \" prop to add help text to the \", _jsx(_components.code, {\n        children: \"FormTextField\"\n      }), \" component. Uses the \", _jsx(_components.a, {\n        href: \"/docs/components-componentlibrary-helptext--default-story\",\n        children: \"HelpText\"\n      }), \" component. Use the \", _jsx(_components.code, {\n        children: \"helpTextProps\"\n      }), \" prop to pass props to the \", _jsx(_components.code, {\n        children: \"HelpText\"\n      }), \" component. To use a custom help text component see the \", _jsx(_components.a, {\n        href: \"#custom-helpText-or-helptext\",\n        children: \"Custom Label or HelpText\"\n      }), \" story example. When \", _jsx(_components.code, {\n        children: \"error\"\n      }), \" is true the \", _jsx(_components.code, {\n        children: \"helpText\"\n      }), \" will be rendered as an error message.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-formtextfield--help-text-story\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { FormTextField } from '../../component-library';\\n\\n<FormTextField helpText=\\\"HelpText content appears here\\\" />;\\n<FormTextField\\n  error\\n  helpText=\\\"When error is true the help text will be rendered as an error message\\\"\\n/>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"form-example\",\n      children: \"Form Example\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"An example of a form using the \", _jsx(_components.code, {\n        children: \"FormTextField\"\n      }), \" component.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-formtextfield--form-example\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import React, { useState, useEffect } from 'react';\\nimport {\\n  Display,\\n  TextColor,\\n  AlignItems,\\n  TextVariant,\\n} from '../../../helpers/constants/design-system';\\n\\nimport Box from '../../ui/box/box';\\n\\nimport {\\n  ButtonPrimary,\\n  ButtonSecondary,\\n  FormTextField,\\n  IconName,\\n  Text,\\n} from '../../component-library';\\n\\nconst FORM_STATE = {\\n  DEFAULT: 'default',\\n  SUCCESS: 'success',\\n  ERROR: 'error',\\n};\\n\\nconst VALIDATED_VALUES = {\\n  NETWORK_NAME: 'network name',\\n  NEW_RPC_URL: 'new rpc url',\\n  CHAIN_ID: 'chain id',\\n};\\n\\nconst ERROR_MESSAGES = {\\n  NETWORK_NAME: `Please enter \\\"${VALIDATED_VALUES.NETWORK_NAME}\\\"`,\\n  NEW_RPC_URL: `Please enter \\\"${VALIDATED_VALUES.NEW_RPC_URL}\\\"`,\\n  CHAIN_ID: `Please enter \\\"${VALIDATED_VALUES.CHAIN_ID}\\\"`,\\n};\\n\\nconst [submitted, setSubmitted] = useState(FORM_STATE.DEFAULT);\\n\\nconst [values, setValues] = useState({\\n  networkName: '',\\n  newRpcUrl: '',\\n  chainId: '',\\n});\\n\\nconst [errors, setErrors] = useState({\\n  networkName: '',\\n  newRpcUrl: '',\\n  chainId: '',\\n});\\n\\nuseEffect(() => {\\n  setErrors({\\n    networkName:\\n      values.networkName &&\\n      values.networkName.toLowerCase() !== VALIDATED_VALUES.NETWORK_NAME\\n        ? ERROR_MESSAGES.NETWORK_NAME\\n        : '',\\n    newRpcUrl:\\n      values.newRpcUrl &&\\n      values.newRpcUrl.toLowerCase() !== VALIDATED_VALUES.NEW_RPC_URL\\n        ? ERROR_MESSAGES.NEW_RPC_URL\\n        : '',\\n    chainId:\\n      values.chainId &&\\n      values.chainId.toLowerCase() !== VALIDATED_VALUES.CHAIN_ID\\n        ? ERROR_MESSAGES.CHAIN_ID\\n        : '',\\n  });\\n}, [values]);\\n\\nconst handleClearForm = () => {\\n  setValues({ networkName: '', newRpcUrl: '', chainId: '' });\\n  setErrors({ networkName: '', newRpcUrl: '', chainId: '' });\\n  setSubmitted(FORM_STATE.DEFAULT);\\n};\\n\\nconst handleOnChange = (e) => {\\n  if (submitted === FORM_STATE.ERROR) {\\n    setErrors({ networkName: '', newRpcUrl: '', chainId: '' });\\n    setSubmitted(FORM_STATE.DEFAULT);\\n  }\\n  setValues({\\n    ...values,\\n    [e.target.name]: e.target.value,\\n  });\\n};\\n\\nconst handleOnSubmit = (e) => {\\n  e.preventDefault();\\n  if (errors.networkName || errors.newRpcUrl || errors.chainId) {\\n    setSubmitted(FORM_STATE.ERROR);\\n  } else {\\n    setSubmitted(FORM_STATE.SUCCESS);\\n  }\\n};\\n\\nreturn (\\n  <>\\n    <Box\\n      as=\\\"form\\\"\\n      onSubmit={handleOnSubmit}\\n      marginBottom={4}\\n      style={{ width: '100%', maxWidth: '420px' }}\\n    >\\n      <FormTextField\\n        marginBottom={4}\\n        label=\\\"Network name\\\"\\n        placeholder=\\\"Enter 'network name'\\\"\\n        required\\n        name=\\\"networkName\\\"\\n        id=\\\"networkName\\\"\\n        onChange={handleOnChange}\\n        value={values.networkName}\\n        error={Boolean(submitted === FORM_STATE.ERROR && errors.networkName)}\\n        helpText={submitted === FORM_STATE.ERROR ? errors.networkName : null}\\n      />\\n      <FormTextField\\n        marginBottom={4}\\n        label=\\\"New RPC URL\\\"\\n        placeholder=\\\"Enter 'new RPC URL'\\\"\\n        required\\n        name=\\\"newRpcUrl\\\"\\n        id=\\\"newRpcUrl\\\"\\n        onChange={handleOnChange}\\n        value={values.newRpcUrl}\\n        error={Boolean(submitted === FORM_STATE.ERROR && errors.newRpcUrl)}\\n        helpText={submitted === FORM_STATE.ERROR ? errors.newRpcUrl : null}\\n      />\\n      <FormTextField\\n        label=\\\"Chain ID\\\"\\n        marginBottom={4}\\n        placeholder=\\\"Enter 'chain ID'\\\"\\n        required\\n        name=\\\"chainId\\\"\\n        id=\\\"chainId\\\"\\n        onChange={handleOnChange}\\n        value={values.chainId}\\n        error={Boolean(submitted === FORM_STATE.ERROR && errors.chainId)}\\n        helpText={submitted === FORM_STATE.ERROR ? errors.chainId : null}\\n      />\\n      <Box display={Display.Flex} alignItems={AlignItems.center} gap={1}>\\n        <ButtonPrimary type=\\\"submit\\\">Submit</ButtonPrimary>\\n      </Box>\\n    </Box>\\n    <ButtonSecondary icon={IconName.Close} onClick={handleClearForm} danger>\\n      Clear form\\n    </ButtonSecondary>\\n    {submitted === FORM_STATE.SUCCESS && (\\n      <Text\\n        variant={TextVariant.bodyMd}\\n        color={TextColor.successDefault}\\n        marginTop={4}\\n      >\\n        Form successfully submitted!\\n      </Text>\\n    )}\\n  </>\\n);\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"custom-label-or-helptext\",\n      children: \"Custom Label or HelpText\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"There will be times when you will want to use a custom \", _jsx(_components.code, {\n        children: \"Label\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"HelpText\"\n      }), \". This can be done by simply not providing \", _jsx(_components.code, {\n        children: \"label\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"helpText\"\n      }), \" props to the \", _jsx(_components.code, {\n        children: \"FormTextField\"\n      }), \" component. You can then use the \", _jsx(_components.code, {\n        children: \"Label\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"HelpText\"\n      }), \" components to create your own custom label or help text.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-formtextfield--custom-label-or-help-text\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import {\\n  Size,\\n  Display,\\n  IconColor,\\n  AlignItems,\\n  JustifyContent,\\n} from '../../../helpers/constants/design-system';\\n\\nimport Box from '../../ui/box/box';\\n\\nimport { Icon, IconName } from '..'\\nimport {\\n  ButtonLink,\\n  FormTextField,\\n  HelpText,\\n  Label,\\n  TextFieldType,\\n  Text,\\n} from '../../component-library';\\n\\n<Text marginBottom={4}>\\n  Examples of how one might customize the Label or HelpText within the\\n  FormTextField component\\n</Text>\\n<Box\\n  display={Display.Flex}\\n  justifyContent={JustifyContent.spaceBetween}\\n  alignItems={AlignItems.flexEnd}\\n>\\n  <Box display={Display.Flex} alignItems={AlignItems.center}>\\n    {/**\\n      * If you need a custom label\\n      * or require adding some form of customization\\n      * import the Label component separately\\n      */}\\n    <Label htmlFor=\\\"custom-spending-cap\\\">\\n      Custom spending cap\\n    </Label>\\n    <Icon\\n      name={IconName.Info}\\n      size={IconSize.Sm}\\n      marginLeft={1}\\n      color={IconColor.iconAlternative}\\n    />\\n  </Box>\\n  <ButtonLink>Use default</ButtonLink>\\n</Box>\\n<FormTextField\\n  id=\\\"custom-spending-cap\\\"\\n  placeholder=\\\"Enter a number\\\"\\n  endAccessory={<ButtonLink>Max</ButtonLink>}\\n  marginBottom={4}\\n  type={TextFieldType.Number}\\n/>\\n<FormTextField\\n  label=\\\"Swap from\\\"\\n  placeholder=\\\"0\\\"\\n  type={TextFieldType.Number}\\n/>\\n<Box\\n  display={Display.Flex}\\n  alignItems={AlignItems.flexStart}\\n  justifyContent={JustifyContent.spaceBetween}\\n  marginTop={1}\\n>\\n  {/**\\n    * If you need a custom help text\\n    * or require adding some form of customization\\n    * import the HelpText component separately and handle the error\\n    * logic yourself\\n    */}\\n  <HelpText htmlFor=\\\"chainId\\\" marginRight={2}>\\n    Only enter a number that you're comfortable with the contract accessing\\n    now or in the future. You can always increase the token limit later.\\n  </HelpText>\\n  <ButtonLink marginLeft=\\\"auto\\\">\\n    Max\\n  </ButtonLink>\\n</Box>\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":[],"sourceRoot":""}