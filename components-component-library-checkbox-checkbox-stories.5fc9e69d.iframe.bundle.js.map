{"version":3,"file":"components-component-library-checkbox-checkbox-stories.5fc9e69d.iframe.bundle.js","mappings":";AAswsources":["webpack://metamask-crx/./ui/components/component-library/checkbox/README.mdx","webpack://metamask-crx/"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/home/runner/work/metamask-extension/metamask-extension/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Story, Canvas, ArgsTable} from '@storybook/addon-docs';\nimport {Checkbox} from './checkbox';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    h3: \"h3\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"checkbox\",\n      children: \"Checkbox\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Checkbox is a graphical element that allows users to select one or more options from a set of choices.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://www.notion.so/MetaMask-Design-System-Guides-Design-f86ecc914d6b4eb6873a122b83c12940\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"MetaMask Design System Guides\"\n      })\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-checkbox--default-story\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"props\",\n      children: \"Props\"\n    }), \"\\n\", _jsx(ArgsTable, {\n      of: Checkbox\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"label\",\n      children: \"Label\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"label\"\n      }), \" string prop to set the label of the \", _jsx(_components.code, {\n        children: \"Checkbox\"\n      })]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-checkbox--label\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Checkbox } from '../../component-library';\\n\\n<Checkbox label=\\\"Checkbox Label\\\" />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"ischecked\",\n      children: \"IsChecked\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"isChecked\"\n      }), \" boolean prop to set the checked state of the \", _jsx(_components.code, {\n        children: \"Checkbox\"\n      })]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-checkbox--is-checked\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Checkbox } from '../../component-library';\\n\\n<Checkbox isChecked={true} label=\\\"isChecked demo\\\" />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"isindeterminate\",\n      children: \"IsIndeterminate\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"isIndeterminate\"\n      }), \" boolean prop to set the indeterminate state of the \", _jsx(_components.code, {\n        children: \"Checkbox\"\n      })]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-checkbox--is-indeterminate\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import React from 'react';\\nimport { Checkbox, Box } from '../../component-library';\\n\\nconst [checkedItems, setCheckedItems] = React.useState([false, true, false]);\\n\\nconst allChecked = checkedItems.every(Boolean);\\nconst isIndeterminate = checkedItems.some(Boolean) && !allChecked;\\n\\nconst handleIndeterminateChange = () => {\\n  if (allChecked || isIndeterminate) {\\n    setCheckedItems([false, false, false]);\\n  } else {\\n    setCheckedItems([true, true, true]);\\n  }\\n};\\n\\nconst handleCheckboxChange = (index, value) => {\\n  const newCheckedItems = [...checkedItems];\\n  newCheckedItems[index] = value;\\n  setCheckedItems(newCheckedItems);\\n};\\n\\n<Checkbox\\n    label=\\\"isIndeterminate demo\\\"\\n    isChecked={allChecked}\\n    isIndeterminate={isIndeterminate}\\n    onChange={handleIndeterminateChange}\\n    marginBottom={2}\\n/>\\n<Box\\n  marginLeft={2}\\n  gap={1}\\n  display={Display.Flex}\\n  flexDirection={FlexDirection.Column}\\n>\\n  <Checkbox\\n    isChecked={checkedItems[0]}\\n    onChange={(e) => handleCheckboxChange(0, e.target.checked)}\\n    label=\\\"Checkbox 1\\\"\\n  />\\n  <Checkbox\\n    isChecked={checkedItems[1]}\\n    onChange={(e) => handleCheckboxChange(1, e.target.checked)}\\n    label=\\\"Checkbox 2\\\"\\n  />\\n  <Checkbox\\n    isChecked={checkedItems[2]}\\n    onChange={(e) => handleCheckboxChange(2, e.target.checked)}\\n    label=\\\"Checkbox 3\\\"\\n  />\\n</Box>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"isdisabled\",\n      children: \"IsDisabled\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"isDisabled\"\n      }), \" boolean prop to set the disabled state of the \", _jsx(_components.code, {\n        children: \"Checkbox\"\n      })]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-checkbox--is-disabled\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Checkbox } from '../../component-library';\\n\\n<Checkbox isDisabled={true} label=\\\"isDisabled demo\\\" />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"isreadonly\",\n      children: \"IsReadOnly\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"isReadOnly\"\n      }), \" boolean prop to set the readOnly attribute of the \", _jsx(_components.code, {\n        children: \"Checkbox\"\n      })]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-checkbox--is-read-only\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Checkbox } from '../../component-library';\\n\\n<Checkbox isReadOnly={true} label=\\\"isReadOnly demo\\\" />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"onchange\",\n      children: \"OnChange\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"onChange\"\n      }), \" function prop to set the onChange handler of the \", _jsx(_components.code, {\n        children: \"Checkbox\"\n      })]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-checkbox--on-change\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import React from 'react';\\nimport { Checkbox } from '../../component-library';\\n\\nconst [isChecked, setIsChecked] = React.useState(false);\\n\\n<Checkbox\\n  onChange={() => setIsChecked(!isChecked)}\\n  isChecked={isChecked}\\n  label=\\\"isReadOnly demo\\\"\\n/>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"isrequired\",\n      children: \"IsRequired\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"isRequired\"\n      }), \" boolean prop to set the required attribute of the \", _jsx(_components.code, {\n        children: \"Checkbox\"\n      })]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-checkbox--is-required\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Checkbox } from '../../component-library';\\n\\n<Checkbox isRequired={true} label=\\\"isRequired demo\\\" />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"title\",\n      children: \"Title\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"title\"\n      }), \" string prop to set the title attribute of the \", _jsx(_components.code, {\n        children: \"Checkbox\"\n      }), \"\\nThe title attribute is used to provide additional context or information about the checkbox. It is primarily used for browser native tooltip functionality.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-checkbox--title\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Checkbox } from '../../component-library';\\n\\n<Checkbox title=\\\"Apples\\\" label=\\\"Inspect to see title attribute\\\" />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"name\",\n      children: \"Name\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"name\"\n      }), \" string prop to set the name attribute of the \", _jsx(_components.code, {\n        children: \"Checkbox\"\n      }), \"\\nThis is best used when working with a form and submitting the value of the \", _jsx(_components.code, {\n        children: \"Checkbox\"\n      })]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-checkbox--name\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Checkbox } from '../../component-library';\\n\\n<Checkbox name=\\\"pineapple\\\" label=\\\"Inspect to see name attribute\\\" />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"inputprops\",\n      children: \"InputProps\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"inputProps\"\n      }), \" object prop to add additonal props or attributes to the hidden input element\\nIf needing to pass a ref to the input element, use the \", _jsx(_components.code, {\n        children: \"inputRef\"\n      }), \" prop\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-checkbox--input-props\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Checkbox } from '../../component-library';\\n\\n<Checkbox\\n  label=\\\"inputProps demo\\\"\\n  inputProps={{ borderColor: BorderColor.errorDefault }}\\n/>;\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":[],"sourceRoot":""}