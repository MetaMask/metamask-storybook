{"version":3,"file":"components-component-library-popover-popover-stories.56e3e755.iframe.bundle.js","mappings":";AAsBA;AAEA;AAOA;AAIA;AAGA;AAEA;AAGA;AAIA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAIA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAMA;AAIA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAGA;AAGA;AAGA;AAAA;AAAA;AAEA;AAGA;AAIA;AAGA;AAAA;AAAA;AAEA;AAGA;AAIA;AAGA;AAAA;AAAA;AAEA;AAGA;AAGA;AAGA;AAGA;AAAA;AAAA;AAEA;AAGA;AAGA;AAGA;AAGA;AAAA;AAAA;AAEA;AAGA;AAIA;AAGA;AAAA;AAAA;AAEA;AAGA;AAIA;AAGA;AAAA;AAAA;AAEA;AAGA;AAKA;AAKA;AAIA;AAGA;AAAA;AAAA;AAAA;AAEA;AAGA;AAGA;AAEA;AACA;AAGA;AAAA;AAAA;AAEA;AAGA;AAMA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAMA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAQA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAQA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAQA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AC2gsources":["webpack://metamask-crx/./ui/components/component-library/popover/README.mdx","webpack://metamask-crx/"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/home/runner/work/metamask-extension/metamask-extension/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Story, Canvas, ArgsTable} from '@storybook/addon-docs';\nimport {Popover} from './popover';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    h3: \"h3\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"popover\",\n      children: \"Popover\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Popover is an overlay that appears by the trigger used for menus, additional contents, and contains at least one focusable element.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://www.notion.so/MetaMask-Design-System-Guides-Design-f86ecc914d6b4eb6873a122b83c12940\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"MetaMask Design System Guides\"\n      })\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-popover--default-story\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"props\",\n      children: \"Props\"\n    }), \"\\n\", _jsx(ArgsTable, {\n      of: Popover\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"reference-element\",\n      children: \"Reference Element\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"referenceElement\"\n      }), \" prop is required and used to position the popover relative to the reference element.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { useState } from 'react';\\nimport { BackgroundColor } from '../../../helpers/constants/design-system'\\nimport { Popover, Box } from '../../component-library';\\n\\nconst [referenceElement, setReferenceElement] = useState();\\n\\nconst setBoxRef = (ref) => {\\nsetReferenceElement(ref);\\n};\\n\\n<Box\\n  ref={setBoxRef}\\n  backgroundColor={BackgroundColor.primaryDefault}\\n  style={{ width: 200, height: 200 }}\\n/>\\n<Popover referenceElement={referenceElement}>Reference element</Popover>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"children\",\n      children: \"Children\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Popover accepts any children and has a default padding of \", _jsx(_components.code, {\n        children: \"4\"\n      }), \" (16px).\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import {\\n  Popover,\\n  Text,\\n  Icon,\\n  IconSize,\\n  IconName,\\n} from '../../component-library';\\n\\n<Popover>\\n  <Text>\\n    Demo of popover with children.\\n    <Icon size={IconSize.Inherit} name={IconName.Info} />\\n  </Text>\\n</Popover>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"position\",\n      children: \"Position\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"position\"\n      }), \" prop with the \", _jsx(_components.code, {\n        children: \"PopoverPosition\"\n      }), \" enum to set the position of the popover relative to the reference element.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Default is \", _jsx(_components.code, {\n        children: \"PopoverPosition.Auto\"\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Popover, PopoverPosition } from '../../component-library';\\n\\n<Popover position={PopoverPosition.Auto}>Auto</Popover>\\n<Popover position={PopoverPosition.AutoStart}>AutoStart</Popover>\\n<Popover position={PopoverPosition.AutoEnd}>AutoEnd</Popover>\\n<Popover position={PopoverPosition.Top}>Top</Popover>\\n<Popover position={PopoverPosition.TopStart}>TopStart</Popover>\\n<Popover position={PopoverPosition.TopEnd}>TopEnd</Popover>\\n<Popover position={PopoverPosition.Right}>Right</Popover>\\n<Popover position={PopoverPosition.RightStart}>RightStart</Popover>\\n<Popover position={PopoverPosition.RightEnd}>RightEnd</Popover>\\n<Popover position={PopoverPosition.Bottom}>Bottom</Popover>\\n<Popover position={PopoverPosition.BottomStart}>BottomStart</Popover>\\n<Popover position={PopoverPosition.BottomEnd}>BottomEnd</Popover>\\n<Popover position={PopoverPosition.Left}>Left</Popover>\\n<Popover position={PopoverPosition.LeftStart}>LeftStart</Popover>\\n<Popover position={PopoverPosition.LeftEnd}>LeftEnd</Popover>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"is-portal\",\n      children: \"Is Portal\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"isPortal\"\n      }), \" prop is a boolean that when set to true, causes the Popover to be rendered as a separate DOM element at the end of the document body.\\nDefault \", _jsx(_components.code, {\n        children: \"false\"\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Popover } from '../../component-library';\\n\\n<Popover isPortal={true}>Popover using create portal</Popover>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"has-arrow\",\n      children: \"Has Arrow\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"hasArrow\"\n      }), \" boolean to add an arrow to the popover.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Popover } from '../../component-library';\\n\\n<Popover hasArrow>Popover with arrow</Popover>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"is-open\",\n      children: \"Is Open\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"isOpen\"\n      }), \" boolean to control the visibility of the popover.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Popover } from '../../component-library';\\n\\n<Popover isOpen={true}>Popover with arrow</Popover>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"flip\",\n      children: \"Flip\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"flip\"\n      }), \" boolean to flip the popover to the opposite side of the reference element if there is not enough space.\\nFor \", _jsx(_components.code, {\n        children: \"PopoverPosition.Auto\"\n      }), \" this will become true.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Popover } from '../../component-library';\\n\\n<Popover flip={true}>Flip demo</Popover>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"prevent-overflow\",\n      children: \"Prevent Overflow\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"preventOverflow\"\n      }), \" boolean to prevent the popover from overflowing the viewport.\\nFor \", _jsx(_components.code, {\n        children: \"PopoverPosition.Auto\"\n      }), \" this will become true.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Popover } from '../../component-library';\\n\\n<Popover preventOverflow={true}>Prevent overflow demo</Popover>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"reference-hidden\",\n      children: \"Reference Hidden\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"referenceHidden\"\n      }), \" boolean to hide the Popover when the reference element is no longer visible in the viewport.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Popover } from '../../component-library';\\n\\n<Popover referenceHidden={true}>Reference hidden demo</Popover>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"match-width\",\n      children: \"Match Width\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"matchWidth\"\n      }), \" boolean to match the width of the popover to the reference element.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Popover } from '../../component-library';\\n\\n<Popover matchWidth={true}>Match width demo</Popover>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"role\",\n      children: \"Role\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"role\"\n      }), \" prop with \", _jsx(_components.code, {\n        children: \"PopoverRole\"\n      }), \" enum to set the role of the popover.\\n\", _jsx(_components.code, {\n        children: \"PopoverRole.Dialog\"\n      }), \" if the content is interactive, or \", _jsx(_components.code, {\n        children: \"PopoverRole.Tooltip\"\n      }), \" for purely informational popovers.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Default: \", _jsx(_components.code, {\n        children: \"PopoverRole.Tooltip\"\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Popover, PopoverRole } from '../../component-library';\\n\\n<Popover role={PopoverRole.Tooltip}>PopoverRole.Tooltip</Popover>;\\n<Popover role={PopoverRole.Dialog}>PopoverRole.Dialog</Popover>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"offset\",\n      children: \"Offset\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"offset\"\n      }), \" prop to pass an array of two numbers to offset the popover from the reference element.\\nDefault is \", _jsx(_components.code, {\n        children: \"[0, 8]\"\n      }), \"\\nFirst number controls the skidding offset and the second number controls the distance offset.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Popover } from '../../component-library';\\n\\n<Popover offset={[0, 32]}>offset override to [0,32]</Popover>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"on-press-esc-key\",\n      children: \"On Press Esc Key\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"onPressEscKey\"\n      }), \" is a callback function that is invoked when the 'Escape' key is pressed within the \", _jsx(_components.code, {\n        children: \"Popover\"\n      }), \" component\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Popover } from '../../component-library';\\n\\nconst [isOpen, setIsOpen] = useState(false);\\n\\nconst handleClick = () => {\\n  setIsOpen(!isOpen);\\n};\\n\\n<Popover onPressEscKey={() => setIsOpen(false)}>\\n  Press esc key to close\\n</Popover>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"onclickoutside\",\n      children: \"onClickOutside\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"onClickOutside\"\n      }), \" is a callback function that is invoked when the user clicks outside of the \", _jsx(_components.code, {\n        children: \"Popover\"\n      }), \" component\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Popover } from '../../component-library';\\n\\nconst [isOpen, setIsOpen] = useState(false);\\n\\nconst handleClick = () => {\\n  setIsOpen(!isOpen);\\n};\\n\\n<Popover onClickOutside={() => setIsOpen(false)}>\\n  Press esc key to close\\n</Popover>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"with-popoverheader\",\n      children: \"With PopoverHeader\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Using the \", _jsx(_components.code, {\n        children: \"PopoverHeader\"\n      }), \" component to add a header to the \", _jsx(_components.code, {\n        children: \"Popover\"\n      }), \" component. The \", _jsx(_components.code, {\n        children: \"PopoverHeader\"\n      }), \" is used to show common elements such as title, back button, and close button.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Popover } from '../../component-library';\\n\\n<Popover>\\n  <PopoverHeader\\n    onClose={() => console.log('close')}\\n    onBack={() => console.log('back')}\\n  >\\n    Popover Title\\n  </PopoverHeader>\\n  Title should be short and concise. It should be sentence case and no period.\\n</Popover>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"mouse-event-demo\",\n      children: \"Mouse Event Demo\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Not built into the \", _jsx(_components.code, {\n        children: \"Popover\"\n      }), \" component, but a demo of \", _jsx(_components.code, {\n        children: \"onMouseEnter\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"onMouseLeave\"\n      }), \" events on the reference element to control the visibility of the popover\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Popover } from '../../component-library';\\n\\nconst [isOpen, setIsOpen] = useState(false);\\n\\nconst handleMouseEnter = () => {\\n  setIsOpen(true);\\n};\\n\\nconst handleMouseLeave = () => {\\n  setIsOpen(false);\\n};\\n\\n<>\\n  <Box onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\\n    Hover\\n  </Box>\\n  <Popover isOpen={isOpen}>onMouseEnter and onMouseLeave</Popover>\\n</>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"on-focusblur-demo\",\n      children: \"On Focus/Blur Demo\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Not built into the \", _jsx(_components.code, {\n        children: \"Popover\"\n      }), \" component, but a demo of \", _jsx(_components.code, {\n        children: \"onFocus\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"onBlur\"\n      }), \" events on the reference element to control the visibility of the popover\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Popover } from '../../component-library';\\n\\nconst [isOpen, setIsOpen] = useState(false);\\n\\n// Example of how open popover with focus and pair with onBlur to close popover\\nconst handleFocus = () => {\\n  setIsOpen(true);\\n};\\n\\nconst handleClose = () => {\\n  setIsOpen(false);\\n};\\n\\n<>\\n  <Box onFocus={handleFocus} onBlur={handleClose} as=\\\"button\\\">\\n    Focus to open\\n  </Box>\\n  <Popover>onFocus to open and onBlur to close</Popover>\\n</>;\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":[],"sourceRoot":""}