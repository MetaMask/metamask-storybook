{"version":3,"file":"components-component-library-modal-content-modal-content-stories.cb3004a5.iframe.bundle.js","mappings":";AAwBA;AAMA;AAOA;AAIA;AAGA;AAEA;AAGA;AAUA;AAIA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAMA;AACA;AAIA;AAIA;AAIA;AACA;AAMA;AAIA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACkJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://metamask-crx/./ui/components/component-library/modal-content/README.mdx","webpack://metamask-crx/"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/home/runner/work/metamask-extension/metamask-extension/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Story, Canvas, ArgsTable} from '@storybook/addon-docs';\nimport {ModalContent} from './modal-content';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    h2: \"h2\",\n    h3: \"h3\",\n    pre: \"pre\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"modalcontent\",\n      children: \"ModalContent\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"ModalContent\"\n      }), \" is the container for the modal dialog's content. It uses context supplied by the \", _jsx(_components.code, {\n        children: \"Modal\"\n      }), \" component and cannot be used without it.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://www.notion.so/MetaMask-Design-System-Guides-Design-f86ecc914d6b4eb6873a122b83c12940\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"MetaMask Design System Guides\"\n      })\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-modalcontent--default-story\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"props\",\n      children: \"Props\"\n    }), \"\\n\", _jsx(ArgsTable, {\n      of: ModalContent\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"children\",\n      children: \"Children\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"children\"\n      }), \" prop to render the content of \", _jsx(_components.code, {\n        children: \"ModalContent\"\n      }), \". The \", _jsx(_components.code, {\n        children: \"ModalContent\"\n      }), \" should generally be used with the \", _jsx(_components.code, {\n        children: \"ModalHeader\"\n      }), \" component.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-modalcontent--children\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import React, { useState } from 'react';\\nimport { Modal, ModalContent, ModalHeader, ModalBody, Text, Button, ButtonVariant } from '../../component-library';\\n\\nconst [show, setShow] = useState(false);\\nconst handleOnClick = () => {\\n  setShow(!show);\\n};\\n\\n<Button variant={ButtonVariant.Primary} onClick={handleOnClick}>\\n  Open\\n</Button>\\n<Modal isOpen={show} onClose={handleOnClick}>\\n  <ModalContent {...args}>\\n    <ModalHeader marginBottom={4}>Modal Header</ModalHeader>\\n    <ModalBody>\\n      <Text marginBottom={4}>Modal Content</Text>\\n      <Button variant={ButtonVariant.Primary} onClick={handleOnClick}>\\n        Close\\n      </Button>\\n      <LoremIpsum />\\n      <LoremIpsum />\\n      <LoremIpsum />\\n      <LoremIpsum />\\n      <LoremIpsum />\\n    </ModalBody>\\n  </ModalContent>\\n</Modal>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"size\",\n      children: \"Size\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"size\"\n      }), \" prop to set the size of the \", _jsx(_components.code, {\n        children: \"ModalContent\"\n      })]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"ModalContentSize.Sm\"\n        }), \" (360px)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"ModalContentSize.Md\"\n        }), \" (480px)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"ModalContentSize.Lg\"\n        }), \" (720px)\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To set a custom size, use the \", _jsx(_components.code, {\n        children: \"modalDialogProps\"\n      }), \" prop and pass in a \", _jsx(_components.code, {\n        children: \"className\"\n      }), \" with a max width.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        id: \"components-componentlibrary-modalcontent--size\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import {\\n  ModalContent,\\n  ModalContentSize,\\n  ModalHeader,\\n  ModalBody,\\n  ModalFooter,\\n} from '../../component-library';\\n\\n<ModalContent size={ModalContentSize.Sm}>\\n  <ModalHeader marginBottom={4}>\\n    This ModalContent is using size: sm\\n  </ModalHeader>\\n  <ModalBody>\\n    <Text marginBottom={4}>This ModalContent is using size: sm</Text>\\n  </ModalBody>\\n  <ModalFooter onSubmit={handleOnClose}>\\n</ModalContent>;\\n\\n<ModalContent size={ModalContentSize.Md}>\\n  <ModalHeader marginBottom={4}>\\n    This ModalContent is using size: md\\n  </ModalHeader>\\n  <Text marginBottom={4}>This ModalContent is using size: md</Text>\\n</ModalContent>;\\n\\n<ModalContent size={ModalContentSize.Lg}>\\n  <ModalHeader marginBottom={4}>\\n    This ModalContent is using size: lg\\n  </ModalHeader>\\n  <Text marginBottom={4}>This ModalContent is using size: lg</Text>\\n  <ModalFooter onSubmit={handleOnClose}>\\n</ModalContent>;\\n\\n/* Using a className\\n  .max-width-800 {\\n    max-width: 800px;\\n  }\\n*/\\n<ModalContent modalDialogProps={{ className: 'max-width-800' }}>\\n  <ModalHeader marginBottom={4}>\\n    This ModalContent is using size: className\\n  </ModalHeader>\\n  <Text marginBottom={4}>\\n    This ModalContent has size set using modalDialogProps and adding a className\\n    setting a max width (max-width: 800px)\\n  </Text>\\n  <ModalFooter onSubmit={handleOnClose}>\\n</ModalContent>;\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":[],"sourceRoot":""}