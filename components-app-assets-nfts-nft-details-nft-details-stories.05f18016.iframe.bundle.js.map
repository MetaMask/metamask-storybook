{"version":3,"file":"components-app-assets-nfts-nft-details-nft-details-stories.05f18016.iframe.bundle.js","mappings":";AAqTA;AAOA;ACzNA;AAAA;AAUA;AAAA","sources":["webpack://metamask-crx/./ui/components/app/assets/nfts/nft-details/nft-details.tsx","webpack://metamask-crx/"],"sourcesContent":["import React, { useEffect, useContext } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { isEqual } from 'lodash';\nimport { getTokenTrackerLink, getAccountLink } from '@metamask/etherscan-link';\nimport { Nft } from '@metamask/assets-controllers';\nimport { Hex } from '@metamask/utils';\nimport {\n  BlockSize,\n  BorderColor,\n  TextColor,\n  IconColor,\n  TextVariant,\n  FontWeight,\n  JustifyContent,\n  Display,\n  FlexWrap,\n  FontStyle,\n  TextAlign,\n  AlignItems,\n} from '../../../../../helpers/constants/design-system';\nimport { useI18nContext } from '../../../../../hooks/useI18nContext';\nimport { shortenAddress } from '../../../../../helpers/utils/util';\nimport { getNftImage, getNftImageAlt } from '../../../../../helpers/utils/nfts';\nimport {\n  getCurrentChainId,\n  getNetworkConfigurationsByChainId,\n} from '../../../../../../shared/modules/selectors/networks';\nimport {\n  getCurrentNetwork,\n  getIpfsGateway,\n  getNetworkConfigurationIdByChainId,\n} from '../../../../../selectors';\nimport {\n  ASSET_ROUTE,\n  DEFAULT_ROUTE,\n} from '../../../../../helpers/constants/routes';\nimport {\n  checkAndUpdateSingleNftOwnershipStatus,\n  removeAndIgnoreNft,\n  setRemoveNftMessage,\n  setNewNftAddedMessage,\n  setActiveNetworkWithError,\n} from '../../../../../store/actions';\nimport { CHAIN_IDS } from '../../../../../../shared/constants/network';\nimport NftOptions from '../nft-options/nft-options';\nimport { startNewDraftTransaction } from '../../../../../ducks/send';\nimport InfoTooltip from '../../../../ui/info-tooltip';\nimport { usePrevious } from '../../../../../hooks/usePrevious';\nimport { useCopyToClipboard } from '../../../../../hooks/useCopyToClipboard';\nimport {\n  AssetType,\n  TokenStandard,\n} from '../../../../../../shared/constants/transaction';\nimport {\n  ButtonIcon,\n  IconName,\n  Text,\n  Box,\n  ButtonIconSize,\n  ButtonPrimarySize,\n  ButtonPrimary,\n  Icon,\n} from '../../../../component-library';\nimport { NftItem } from '../../../../multichain/nft-item';\nimport {\n  MetaMetricsEventName,\n  MetaMetricsEventCategory,\n} from '../../../../../../shared/constants/metametrics';\nimport { MetaMetricsContext } from '../../../../../contexts/metametrics';\nimport { Content, Footer, Page } from '../../../../multichain/pages/page';\nimport { formatCurrency } from '../../../../../helpers/utils/confirm-tx.util';\nimport { getShortDateFormatterV2 } from '../../../../../pages/asset/util';\nimport { CHAINID_DEFAULT_BLOCK_EXPLORER_URL_MAP } from '../../../../../../shared/constants/common';\nimport {\n  getConversionRate,\n  getCurrentCurrency,\n} from '../../../../../ducks/metamask/metamask';\nimport { Numeric } from '../../../../../../shared/modules/Numeric';\n// TODO: Remove restricted import\nimport {\n  addUrlProtocolPrefix,\n  isWebUrl,\n  // eslint-disable-next-line import/no-restricted-paths\n} from '../../../../../../app/scripts/lib/util';\nimport useGetAssetImageUrl from '../../../../../hooks/useGetAssetImageUrl';\nimport { getImageForChainId } from '../../../../../selectors/multichain';\nimport useFetchNftDetailsFromTokenURI from '../../../../../hooks/useFetchNftDetailsFromTokenURI';\nimport { navigateToSendRoute } from '../../../../../pages/confirmations/utils/send';\nimport NftDetailInformationRow from './nft-detail-information-row';\nimport NftDetailInformationFrame from './nft-detail-information-frame';\nimport NftDetailDescription from './nft-detail-description';\nimport { renderShortTokenId } from './utils';\n\nconst MAX_TOKEN_ID_LENGTH = 15;\n\n// TODO: Fix in https://github.com/MetaMask/metamask-extension/issues/31860\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function NftDetailsComponent({\n  nft,\n  nftChainId,\n}: {\n  nft: Nft;\n  nftChainId: string;\n}) {\n  const {\n    image: _image,\n    imageOriginal,\n    name,\n    description,\n    address,\n    tokenId,\n    standard,\n    isCurrentlyOwned,\n    lastSale,\n    collection,\n    rarityRank,\n    topBid,\n    attributes,\n    tokenURI,\n  } = nft;\n\n  const t = useI18nContext();\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const ipfsGateway = useSelector(getIpfsGateway);\n  const currentNetwork = useSelector(getCurrentChainId);\n  const currentChain = useSelector(getCurrentNetwork);\n  const trackEvent = useContext(MetaMetricsContext);\n  const currency = useSelector(getCurrentCurrency);\n  const selectedNativeConversionRate = useSelector(getConversionRate);\n\n  const nftNetworkConfigs = useSelector(getNetworkConfigurationsByChainId);\n  const nftChainNetwork = nftNetworkConfigs[nftChainId as Hex];\n  const { defaultRpcEndpointIndex } = nftChainNetwork;\n  const { networkClientId: nftNetworkClientId } =\n    nftChainNetwork.rpcEndpoints[defaultRpcEndpointIndex];\n  const nftChainImage = getImageForChainId(nftChainId as string);\n  const networks = useSelector(getNetworkConfigurationIdByChainId) as Record<\n    string,\n    string\n  >;\n\n  const [addressCopied, handleAddressCopy] = useCopyToClipboard();\n\n  const { image: imageFromTokenURI, name: nameFromTokenURI } =\n    useFetchNftDetailsFromTokenURI(tokenURI);\n\n  const nftImageAlt = getNftImageAlt(nft);\n  const image = getNftImage(_image);\n  const nftSrcUrl = imageOriginal ?? image ?? imageFromTokenURI;\n  const isIpfsURL = nftSrcUrl?.startsWith('ipfs:');\n\n  const isImageHosted =\n    // TODO: Fix in https://github.com/MetaMask/metamask-extension/issues/31880\n    // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n    (image && isWebUrl(image)) ||\n    (imageFromTokenURI && isWebUrl(imageFromTokenURI));\n\n  const nftImageURL = useGetAssetImageUrl(\n    imageOriginal ?? image ?? undefined,\n    ipfsGateway,\n  );\n\n  const hasFloorAskPrice = Boolean(\n    collection?.floorAsk?.price?.amount?.usd &&\n      collection?.floorAsk?.price?.amount?.native,\n  );\n  const hasLastSalePrice = Boolean(\n    lastSale?.price?.amount?.usd && lastSale?.price?.amount?.native,\n  );\n  const hasOnlyContractAddress =\n    !hasLastSalePrice && !hasFloorAskPrice && !rarityRank;\n\n  const getFloorAskSource = () => {\n    if (hasFloorAskPrice && Boolean(collection?.floorAsk?.source?.url)) {\n      return collection?.floorAsk?.source?.url;\n    }\n    return undefined;\n  };\n\n  const getCurrentHighestBidValue = () => {\n    if (\n      topBid?.price?.amount?.native &&\n      collection?.topBid?.price?.amount?.native\n    ) {\n      // return the max between collection top Bid and token topBid\n      const topBidValue = Math.max(\n        topBid?.price?.amount?.native,\n        collection?.topBid?.price?.amount?.native,\n      );\n      const currentChainSymbol = currentChain.ticker;\n      return `${topBidValue}${currentChainSymbol}`;\n    }\n    // return the one that is available\n    const topBidValue =\n      // TODO: Fix in https://github.com/MetaMask/metamask-extension/issues/31880\n      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n      topBid?.price?.amount?.native ||\n      collection?.topBid?.price?.amount?.native;\n    if (!topBidValue) {\n      return undefined;\n    }\n    const currentChainSymbol = currentChain.ticker;\n    return `${topBidValue}${currentChainSymbol}`;\n  };\n\n  const getTopBidSourceDomain = () => {\n    return (\n      // TODO: Fix in https://github.com/MetaMask/metamask-extension/issues/31880\n      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n      topBid?.source?.url ||\n      (collection?.topBid?.sourceDomain\n        ? `https://${collection.topBid?.sourceDomain}`\n        : undefined)\n    );\n  };\n\n  const { chainId } = currentChain;\n\n  useEffect(() => {\n    trackEvent({\n      event: MetaMetricsEventName.NftDetailsOpened,\n      category: MetaMetricsEventCategory.Tokens,\n      properties: {\n        // TODO: Fix in https://github.com/MetaMask/metamask-extension/issues/31860\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        chain_id: chainId,\n      },\n    });\n  }, [trackEvent, chainId]);\n\n  const onRemove = async () => {\n    let isSuccessfulEvent = false;\n    try {\n      await dispatch(removeAndIgnoreNft(address, tokenId, nftNetworkClientId));\n      dispatch(setNewNftAddedMessage(''));\n      dispatch(setRemoveNftMessage('success'));\n      isSuccessfulEvent = true;\n    } catch (err) {\n      dispatch(setNewNftAddedMessage(''));\n      dispatch(setRemoveNftMessage('error'));\n    } finally {\n      // track event\n      trackEvent({\n        event: MetaMetricsEventName.NFTRemoved,\n        category: 'Wallet',\n        properties: {\n          // TODO: Fix in https://github.com/MetaMask/metamask-extension/issues/31860\n          // eslint-disable-next-line @typescript-eslint/naming-convention\n          token_contract_address: address,\n          tokenId: tokenId.toString(),\n          // TODO: Fix in https://github.com/MetaMask/metamask-extension/issues/31860\n          // eslint-disable-next-line @typescript-eslint/naming-convention\n          asset_type: AssetType.NFT,\n          // TODO: Fix in https://github.com/MetaMask/metamask-extension/issues/31860\n          // eslint-disable-next-line @typescript-eslint/naming-convention\n          token_standard: standard,\n          // TODO: Fix in https://github.com/MetaMask/metamask-extension/issues/31860\n          // eslint-disable-next-line @typescript-eslint/naming-convention\n          chain_id: currentNetwork,\n          isSuccessful: isSuccessfulEvent,\n        },\n      });\n      history.push(DEFAULT_ROUTE);\n    }\n  };\n\n  const prevNft = usePrevious(nft);\n  useEffect(() => {\n    if (!isEqual(prevNft, nft)) {\n      checkAndUpdateSingleNftOwnershipStatus(nft, nftNetworkClientId);\n    }\n  }, [nft, nftNetworkClientId, prevNft]);\n\n  const getOpenSeaLink = () => {\n    switch (currentNetwork) {\n      case CHAIN_IDS.MAINNET:\n        return `https://opensea.io/assets/ethereum/${address}/${tokenId}`;\n      case CHAIN_IDS.POLYGON:\n        return `https://opensea.io/assets/matic/${address}/${tokenId}`;\n      case CHAIN_IDS.GOERLI:\n        return `https://testnets.opensea.io/assets/goerli/${address}/${tokenId}`;\n      case CHAIN_IDS.SEPOLIA:\n        return `https://testnets.opensea.io/assets/sepolia/${address}/${tokenId}`;\n      default:\n        return null;\n    }\n  };\n\n  const getBoughtForLink = () => {\n    const currentSource = lastSale?.orderSource;\n    if (currentSource) {\n      return addUrlProtocolPrefix(currentSource);\n    }\n    return null;\n  };\n\n  const openSeaLink = getOpenSeaLink();\n  const sendDisabled =\n    standard !== TokenStandard.ERC721 && standard !== TokenStandard.ERC1155;\n\n  const setCorrectChain = async () => {\n    // If we aren't presently on the chain of the nft, change to it\n    if (nftChainId !== currentChain.chainId) {\n      try {\n        const networkConfigurationId = networks[nftChainId as Hex];\n        await dispatch(setActiveNetworkWithError(networkConfigurationId));\n      } catch (err) {\n        console.error(`Failed to switch chains for NFT.\n          Target chainId: ${nftChainId}, Current chainId: ${\n            currentChain.chainId\n          }.\n          ${\n            // TODO: Fix in https://github.com/MetaMask/metamask-extension/issues/31893\n            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n            err\n          }`);\n        throw err;\n      }\n    }\n  };\n\n  const onSend = async () => {\n    await setCorrectChain();\n    await dispatch(\n      startNewDraftTransaction({\n        type: AssetType.NFT,\n        details: {\n          ...nft,\n          tokenId: nft.tokenId as unknown as number,\n          image: nft.image ?? imageFromTokenURI ?? undefined,\n          name: nft.name ?? nameFromTokenURI ?? undefined,\n        },\n      }),\n    );\n    // We only allow sending one NFT at a time\n    navigateToSendRoute(history, { address: nft.address, chainId: nftChainId });\n  };\n\n  const getDateCreatedTimestamp = (dateString: string) => {\n    const date = new Date(dateString);\n    return Math.floor(date.getTime() / 1000);\n  };\n\n  const getFormattedDate = (dateString: number) => {\n    const date = new Date(dateString * 1000).getTime();\n    return getShortDateFormatterV2().format(date);\n  };\n\n  // TODO: Fix in https://github.com/MetaMask/metamask-extension/issues/31880\n  // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n  const hasPriceSection = getCurrentHighestBidValue() || lastSale?.timestamp;\n  const hasCollectionSection =\n    // TODO: Fix in https://github.com/MetaMask/metamask-extension/issues/31880\n    // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n    collection?.name || collection?.tokenCount || collection?.creator;\n  const hasAttributesSection = attributes && attributes?.length !== 0;\n\n  const blockExplorerTokenLink = (tokenAddress: string) => {\n    return getTokenTrackerLink(\n      tokenAddress,\n      chainId,\n      null as unknown as string, // no networkId\n      null as unknown as string, // no holderAddress\n      {\n        blockExplorerUrl:\n          CHAINID_DEFAULT_BLOCK_EXPLORER_URL_MAP[chainId] ?? null,\n      },\n    );\n  };\n\n  const handleImageClick = () => {\n    return history.push(`${ASSET_ROUTE}/image/${address}/${tokenId}`);\n  };\n\n  const getValueInFormattedCurrency = (\n    nativeValue: number,\n    usdValue: number,\n  ) => {\n    const numericVal = new Numeric(nativeValue, 16);\n    // if current currency is usd or if fetching conversion rate failed then always return USD value\n    if (!selectedNativeConversionRate || currency === 'usd') {\n      const usdValueFormatted = formatCurrency(usdValue.toString(), 'usd');\n      return usdValueFormatted;\n    }\n\n    const value = numericVal\n      .applyConversionRate(selectedNativeConversionRate)\n      .toNumber();\n\n    return formatCurrency(new Numeric(value, 10).toString(), currency);\n  };\n  // TODO: Fix in https://github.com/MetaMask/metamask-extension/issues/31880\n  // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n  const nftItemSrc = isImageHosted ? image || imageFromTokenURI : nftImageURL;\n\n  return (\n    <Page>\n      <Content className=\"nft-details__content\">\n        <Box\n          display={Display.Flex}\n          justifyContent={JustifyContent.spaceBetween}\n        >\n          <ButtonIcon\n            color={IconColor.iconAlternative}\n            size={ButtonIconSize.Sm}\n            ariaLabel={t('back')}\n            iconName={IconName.ArrowLeft}\n            onClick={() => history.push(DEFAULT_ROUTE)}\n            data-testid=\"nft__back\"\n          />\n          <NftOptions\n            showOpenSeaLink={Boolean(openSeaLink)}\n            onViewOnOpensea={() => {\n              if (!openSeaLink) {\n                return null;\n              }\n              return global.platform.openTab({ url: openSeaLink });\n            }}\n            // TODO: Fix in https://github.com/MetaMask/metamask-extension/issues/31879\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\n            onRemove={onRemove}\n          />\n        </Box>\n        <Box\n          display={Display.Flex}\n          justifyContent={JustifyContent.center}\n          marginBottom={8}\n          marginTop={1}\n        >\n          <Box className=\"nft-details__nft-item\">\n            <NftItem\n              src={nftItemSrc as string | undefined}\n              alt={nftImageAlt}\n              networkName={nftChainNetwork.name ?? ''}\n              networkSrc={nftChainImage}\n              isIpfsURL={isIpfsURL}\n              onClick={handleImageClick}\n              detailView\n              clickable\n            />\n          </Box>\n        </Box>\n        <Box>\n          {/* TODO: Fix in https://github.com/MetaMask/metamask-extension/issues/31880 */}\n          {/* eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing */}\n          {name || collection?.name ? (\n            <Box display={Display.Flex} alignItems={AlignItems.center}>\n              <Text\n                variant={TextVariant.headingSm}\n                fontWeight={FontWeight.Medium}\n                color={TextColor.textDefault}\n                fontStyle={FontStyle.Normal}\n                style={{ fontSize: '24px' }}\n                data-testid=\"nft-details__name\"\n              >\n                {/* TODO: Fix in https://github.com/MetaMask/metamask-extension/issues/31880 */}\n                {/* eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing */}\n                {name || collection?.name}\n              </Text>\n              {collection?.openseaVerificationStatus === 'verified' ? (\n                <Icon\n                  marginLeft={1}\n                  name={IconName.SecurityTick}\n                  color={IconColor.primaryDefault}\n                />\n              ) : null}\n            </Box>\n          ) : null}\n\n          <NftDetailDescription value={description} />\n\n          <Box\n            marginTop={4}\n            marginBottom={4}\n            display={Display.Flex}\n            gap={4}\n            flexWrap={FlexWrap.Wrap}\n          >\n            {hasLastSalePrice || hasFloorAskPrice ? (\n              <>\n                <NftDetailInformationFrame\n                  frameClassname=\"nft-details__nft-frame\"\n                  title={t('boughtFor')}\n                  frameTextTitleProps={{\n                    textAlign: TextAlign.Center,\n                    color: TextColor.textAlternative,\n                    variant: TextVariant.bodyMdMedium,\n                  }}\n                  frameTextTitleStyle={{\n                    fontSize: '12px',\n                    lineHeight: '20px',\n                  }}\n                  value={\n                    lastSale?.price?.amount?.usd &&\n                    lastSale?.price?.amount?.native\n                      ? getValueInFormattedCurrency(\n                          lastSale?.price?.amount?.native,\n                          lastSale?.price?.amount?.usd,\n                        )\n                      : t('dataUnavailable')\n                  }\n                  frameTextValueProps={{\n                    color: hasLastSalePrice\n                      ? TextColor.textDefault\n                      : TextColor.textAlternative,\n                    variant: hasLastSalePrice\n                      ? TextVariant.headingSm\n                      : TextVariant.bodyMdMedium,\n                    textAlign:\n                      hasLastSalePrice && lastSale?.orderSource\n                        ? undefined\n                        : TextAlign.Center,\n                  }}\n                  frameTextValueStyle={{\n                    fontSize: hasLastSalePrice ? '16px' : '12px',\n                    lineHeight: hasLastSalePrice ? '24px' : '16px',\n                  }}\n                  icon={\n                    lastSale?.orderSource ? (\n                      <ButtonIcon\n                        size={ButtonIconSize.Sm}\n                        padding={2}\n                        color={IconColor.iconMuted}\n                        onClick={() => {\n                          global.platform.openTab({\n                            url: getBoughtForLink() as string,\n                          });\n                        }}\n                        iconName={IconName.Export}\n                        ariaLabel=\"redirect\"\n                      />\n                    ) : undefined\n                  }\n                />\n                <NftDetailInformationFrame\n                  frameClassname=\"nft-details__nft-frame\"\n                  title={t('highestFloorPrice')}\n                  frameTextTitleProps={{\n                    textAlign: TextAlign.Center,\n                    color: TextColor.textAlternative,\n                    variant: TextVariant.bodyMdMedium,\n                  }}\n                  frameTextTitleStyle={{\n                    fontSize: '12px',\n                    lineHeight: '20px',\n                  }}\n                  value={\n                    collection?.floorAsk?.price?.amount?.usd &&\n                    collection?.floorAsk?.price?.amount?.native\n                      ? getValueInFormattedCurrency(\n                          collection?.floorAsk?.price?.amount?.native,\n                          collection?.floorAsk?.price?.amount?.usd,\n                        )\n                      : t('priceUnavailable')\n                  }\n                  frameTextValueProps={{\n                    color: hasFloorAskPrice\n                      ? TextColor.textDefault\n                      : TextColor.textAlternative,\n                    variant: hasFloorAskPrice\n                      ? TextVariant.headingSm\n                      : TextVariant.bodyMdMedium,\n                    textAlign:\n                      hasFloorAskPrice && getFloorAskSource()\n                        ? undefined\n                        : TextAlign.Center,\n                  }}\n                  frameTextValueStyle={{\n                    fontSize: hasFloorAskPrice ? '16px' : '12px',\n                    lineHeight: hasFloorAskPrice ? '24px' : '16px',\n                  }}\n                  icon={\n                    collection?.floorAsk?.source?.url ? (\n                      <ButtonIcon\n                        size={ButtonIconSize.Sm}\n                        padding={2}\n                        color={IconColor.iconMuted}\n                        onClick={() => {\n                          global.platform.openTab({\n                            url: collection?.floorAsk?.source?.url as string,\n                          });\n                        }}\n                        iconName={IconName.Export}\n                        ariaLabel=\"redirect\"\n                      />\n                    ) : undefined\n                  }\n                />\n              </>\n            ) : null}\n\n            {rarityRank ? (\n              <NftDetailInformationFrame\n                frameClassname=\"nft-details__nft-frame\"\n                title={t('rank')}\n                frameTextTitleProps={{\n                  textAlign: TextAlign.Center,\n                  color: TextColor.textAlternative,\n                  variant: TextVariant.bodyMdMedium,\n                }}\n                frameTextTitleStyle={{\n                  fontSize: '12px',\n                  lineHeight: '20px',\n                }}\n                value={`#${rarityRank}`}\n                frameTextValueProps={{\n                  color: TextColor.textDefault,\n                  variant: TextVariant.headingSm,\n                  textAlign: TextAlign.Center,\n                }}\n                frameTextValueStyle={{\n                  fontSize: '16px',\n                  lineHeight: '24px',\n                }}\n              />\n            ) : null}\n            {hasLastSalePrice || hasFloorAskPrice || rarityRank ? (\n              <NftDetailInformationFrame\n                frameClassname=\"nft-details__nft-frame\"\n                title={t('contractAddress')}\n                frameTextTitleProps={{\n                  textAlign: TextAlign.Center,\n                  color: TextColor.textAlternative,\n                  variant: TextVariant.bodyMdMedium,\n                }}\n                frameTextTitleStyle={{\n                  fontSize: '12px',\n                  lineHeight: '20px',\n                }}\n                buttonAddressValue={\n                  <button\n                    className=\"nft-details__addressButton\"\n                    onClick={() => {\n                      global.platform.openTab({\n                        url: blockExplorerTokenLink(address),\n                      });\n                    }}\n                  >\n                    <Text\n                      color={TextColor.primaryDefault}\n                      fontStyle={FontStyle.Normal}\n                      variant={TextVariant.bodySmMedium}\n                    >\n                      {shortenAddress(address)}\n                    </Text>\n                  </button>\n                }\n                icon={\n                  <ButtonIcon\n                    ariaLabel=\"copy\"\n                    size={ButtonIconSize.Sm}\n                    color={IconColor.primaryDefault}\n                    padding={1}\n                    data-testid=\"nft-address-copy\"\n                    onClick={() => {\n                      (handleAddressCopy as (text: string) => void)?.(\n                        address || '',\n                      );\n                    }}\n                    iconName={\n                      addressCopied ? IconName.CopySuccess : IconName.Copy\n                    }\n                  />\n                }\n              />\n            ) : null}\n          </Box>\n          {hasOnlyContractAddress ? (\n            <NftDetailInformationRow\n              title={t('contractAddress')}\n              buttonAddressValue={\n                address ? (\n                  <button\n                    className=\"nft-details__addressButton\"\n                    onClick={() => {\n                      global.platform.openTab({\n                        url: blockExplorerTokenLink(address),\n                      });\n                    }}\n                  >\n                    <Text\n                      color={TextColor.primaryDefault}\n                      fontStyle={FontStyle.Normal}\n                      variant={TextVariant.bodySmMedium}\n                    >\n                      {shortenAddress(address)}\n                    </Text>\n                  </button>\n                ) : null\n              }\n              valueColor={TextColor.primaryDefault}\n              icon={\n                <ButtonIcon\n                  ariaLabel=\"copy\"\n                  size={ButtonIconSize.Sm}\n                  color={IconColor.primaryDefault}\n                  data-testid=\"nft-address-copy\"\n                  onClick={() => {\n                    (handleAddressCopy as (text: string) => void)?.(\n                      address || '',\n                    );\n                  }}\n                  iconName={\n                    addressCopied ? IconName.CopySuccess : IconName.Copy\n                  }\n                  justifyContent={JustifyContent.flexEnd}\n                />\n              }\n            />\n          ) : null}\n          <NftDetailInformationRow\n            title={t('tokenId')}\n            value={renderShortTokenId(tokenId, 5)}\n            fullValue={tokenId}\n            withPopover={tokenId.length > MAX_TOKEN_ID_LENGTH}\n          />\n          <NftDetailInformationRow\n            title={t('tokenSymbol')}\n            value={collection?.symbol}\n          />\n          <NftDetailInformationRow\n            title={t('numberOfTokens')}\n            value={collection?.tokenCount}\n          />\n          <NftDetailInformationRow\n            title={t('tokenStandard')}\n            value={standard}\n          />\n          <NftDetailInformationRow\n            title={t('dateCreated')}\n            value={\n              collection?.contractDeployedAt\n                ? getFormattedDate(\n                    getDateCreatedTimestamp(collection?.contractDeployedAt),\n                  )\n                : undefined\n            }\n          />\n          {hasPriceSection ? (\n            <>\n              <Box\n                marginTop={4}\n                borderColor={BorderColor.borderMuted}\n                width={BlockSize.Full}\n                style={{\n                  height: '1px',\n                  borderBottomWidth: 0,\n                  borderBottomStyle: 'solid',\n                }}\n              />\n              <Box\n                display={Display.Flex}\n                justifyContent={JustifyContent.spaceBetween}\n                marginTop={4}\n              >\n                <Text\n                  color={TextColor.textDefault}\n                  variant={TextVariant.headingSm}\n                >\n                  {t('price')}\n                </Text>\n              </Box>\n            </>\n          ) : null}\n          <NftDetailInformationRow\n            title={t('lastSold')}\n            value={\n              lastSale?.timestamp\n                ? getFormattedDate(lastSale?.timestamp)\n                : undefined\n            }\n            icon={\n              lastSale?.orderSource ? (\n                <ButtonIcon\n                  size={ButtonIconSize.Sm}\n                  color={IconColor.iconMuted}\n                  onClick={() => {\n                    global.platform.openTab({\n                      url: getBoughtForLink() as string,\n                    });\n                  }}\n                  iconName={IconName.Export}\n                  justifyContent={JustifyContent.flexEnd}\n                  ariaLabel=\"export\"\n                />\n              ) : undefined\n            }\n          />\n          <NftDetailInformationRow\n            title={t('highestCurrentBid')}\n            value={getCurrentHighestBidValue()}\n            icon={\n              getTopBidSourceDomain() ? (\n                <ButtonIcon\n                  size={ButtonIconSize.Sm}\n                  color={IconColor.iconMuted}\n                  onClick={() => {\n                    global.platform.openTab({\n                      url: getTopBidSourceDomain() as string, // Adding cast here because verification has been done on line 594\n                    });\n                  }}\n                  iconName={IconName.Export}\n                  justifyContent={JustifyContent.flexEnd}\n                  ariaLabel=\"redirect\"\n                />\n              ) : undefined\n            }\n          />\n          {hasCollectionSection ? (\n            <>\n              <Box\n                marginTop={4}\n                borderColor={BorderColor.borderMuted}\n                width={BlockSize.Full}\n                style={{\n                  height: '1px',\n                  borderBottomWidth: 0,\n                  borderBottomStyle: 'solid',\n                }}\n              />\n              <Box\n                display={Display.Flex}\n                justifyContent={JustifyContent.spaceBetween}\n                marginTop={4}\n              >\n                <Text\n                  color={TextColor.textDefault}\n                  variant={TextVariant.headingSm}\n                >\n                  {t('notificationItemCollection')}\n                </Text>\n              </Box>\n            </>\n          ) : null}\n          <NftDetailInformationRow\n            title={t('collectionName')}\n            value={collection?.name}\n          />\n          <NftDetailInformationRow\n            title={t('tokensInCollection')}\n            value={collection?.tokenCount}\n          />\n          <NftDetailInformationRow\n            title={t('creatorAddress')}\n            buttonAddressValue={\n              collection?.creator ? (\n                <button\n                  className=\"nft-details__addressButton\"\n                  onClick={() => {\n                    global.platform.openTab({\n                      url: getAccountLink(\n                        collection?.creator as string,\n                        chainId,\n                      ),\n                    });\n                  }}\n                >\n                  <Text\n                    color={TextColor.primaryDefault}\n                    fontStyle={FontStyle.Normal}\n                    variant={TextVariant.bodySmMedium}\n                  >\n                    {shortenAddress(collection?.creator)}\n                  </Text>\n                </button>\n              ) : null\n            }\n            valueColor={TextColor.primaryDefault}\n            icon={\n              <ButtonIcon\n                ariaLabel=\"copy\"\n                size={ButtonIconSize.Sm}\n                color={IconColor.primaryDefault}\n                data-testid=\"nft-address-copy\"\n                onClick={() => {\n                  (handleAddressCopy as (text: string) => void)?.(\n                    // TODO: Fix in https://github.com/MetaMask/metamask-extension/issues/31880\n                    // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n                    collection?.creator || '',\n                  );\n                }}\n                iconName={addressCopied ? IconName.CopySuccess : IconName.Copy}\n                justifyContent={JustifyContent.flexEnd}\n              />\n            }\n          />\n          {hasAttributesSection ? (\n            <>\n              <Box\n                marginTop={4}\n                borderColor={BorderColor.borderMuted}\n                width={BlockSize.Full}\n                style={{\n                  height: '1px',\n                  borderBottomWidth: 0,\n                  borderBottomStyle: 'solid',\n                }}\n              />\n              <Box\n                display={Display.Flex}\n                justifyContent={JustifyContent.spaceBetween}\n                marginTop={4}\n              >\n                <Text\n                  color={TextColor.textDefault}\n                  variant={TextVariant.headingSm}\n                >\n                  {t('attributes')}\n                </Text>\n              </Box>\n            </>\n          ) : null}\n          <Box\n            marginTop={2}\n            display={Display.Flex}\n            gap={2}\n            flexWrap={FlexWrap.Wrap}\n          >\n            {' '}\n            {attributes?.map((elm, idx) => {\n              const { key, value } = elm;\n              return (\n                <NftDetailInformationFrame\n                  key={`${key}-${value}-${idx}`}\n                  frameClassname=\"nft-details__nft-attribute-frame\"\n                  title={key}\n                  frameTextTitleProps={{\n                    color: TextColor.textAlternative,\n                    variant: TextVariant.bodyMdMedium,\n                  }}\n                  frameTextTitleStyle={{\n                    fontSize: '16px',\n                    lineHeight: '24px',\n                  }}\n                  value={value}\n                  frameTextValueProps={{\n                    color: TextColor.textDefault,\n                    variant: TextVariant.bodyMdMedium,\n                  }}\n                  frameTextValueStyle={{\n                    fontSize: '16px',\n                  }}\n                />\n              );\n            })}\n          </Box>\n          <Box>\n            <Text\n              color={TextColor.textAlternative}\n              variant={TextVariant.bodyXs}\n            >\n              {t('nftDisclaimer')}\n            </Text>\n          </Box>\n        </Box>\n      </Content>\n      {isCurrentlyOwned === true ? (\n        <Footer className=\"nft-details__content\">\n          <ButtonPrimary\n            // TODO: Fix in https://github.com/MetaMask/metamask-extension/issues/31879\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\n            onClick={onSend}\n            disabled={sendDisabled}\n            size={ButtonPrimarySize.Lg}\n            block\n            data-testid=\"nft-send-button\"\n          >\n            {t('send')}\n          </ButtonPrimary>\n          {sendDisabled ? (\n            <InfoTooltip position=\"top\" contentText={t('sendingDisabled')} />\n          ) : null}\n        </Footer>\n      ) : null}\n    </Page>\n  );\n}\n\n// TODO: Fix in https://github.com/MetaMask/metamask-extension/issues/31860\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction NftDetails({ nft }: { nft: Nft }) {\n  const { chainId } = useParams();\n\n  return <NftDetailsComponent nft={nft} nftChainId={chainId ?? ''} />;\n}\n\nexport default NftDetails;\n"],"names":[],"sourceRoot":""}