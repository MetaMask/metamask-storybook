{"version":3,"file":"components-component-library-modal-footer-modal-footer-stories.87436d1b.iframe.bundle.js","mappings":";AAwBA;AASA;AAEA;AAGA;AAEA;AAGA;AAIA;AAEA;AAGA;AAAA;AAAA;AAEA;AAGA;AAIA;AAEA;AAGA;AAAA;AAAA;AAEA;AAGA;AAQA;AAMA;AAEA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAcA;AAEA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAiBA;AACA;AAIA;AAIA;AACA;AAEA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACqsources":["webpack://metamask-crx/./ui/components/component-library/modal-footer/README.mdx","webpack://metamask-crx/"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/home/runner/work/metamask-extension/metamask-extension/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Controls, Canvas} from '@storybook/blocks';\nimport * as ModalFooterStories from './modal-footer.stories';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    h2: \"h2\",\n    h3: \"h3\",\n    pre: \"pre\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"modalfooter\",\n      children: \"ModalFooter\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"ModalFooter\"\n      }), \" is a footer component that handles the submit and cancel buttons of the \", _jsx(_components.a, {\n        href: \"?path=/docs/components-componentlibrary-modal--docs\",\n        children: _jsx(_components.code, {\n          children: \"Modal\"\n        })\n      })]\n    }), \"\\n\", _jsx(Canvas, {\n      of: ModalFooterStories.DefaultStory\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"props\",\n      children: \"Props\"\n    }), \"\\n\", _jsx(Controls, {\n      of: ModalFooterStories.DefaultStory\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"on-submit\",\n      children: \"On Submit\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"onSubmit\"\n      }), \" prop is a function that will be called when the submit button is clicked.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      of: ModalFooterStories.OnSubmit\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { ModalFooter } from '../../component-library';\\n\\n<ModalFooter onSubmit={handleOnSubmit} />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"on-cancel\",\n      children: \"On Cancel\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"onCancel\"\n      }), \" prop is a function that will be called when the cancel button is clicked.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      of: ModalFooterStories.OnCancel\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { ModalFooter } from '../../component-library';\\n\\n<ModalFooter onCancel={handleOnCancel} />;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"submit-button-props-cancel-button-props\",\n      children: \"Submit Button Props Cancel Button Props\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"submitButtonProps\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"cancelButtonProps\"\n      }), \" props are objects that will be spread onto the submit and cancel buttons respectively. This allows you to pass in any valid \", _jsx(_components.code, {\n        children: \"Button\"\n      }), \" props to the submit and cancel buttons. Ideally button strings are short but if they are long the submit and cancel buttons will stack vertically.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Note: The stacking of the submit and cancel button will not work if you construct your own \", _jsx(_components.code, {\n        children: \"ModalFooter\"\n      }), \" component using the \", _jsx(_components.code, {\n        children: \"Button\"\n      }), \" components. Additonal CSS is needed.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      of: ModalFooterStories.SubmitButtonPropsCancelButtonProps\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { ModalFooter } from '../../component-library';\\n\\n<ModalFooter\\n  onSubmit={handleOnSubmit}\\n  submitButtonProps={{ children: 'I want to approve' }}\\n  onCancel={handleOnCancel}\\n  cancelButtonProps={{\\n    children: 'Cancel this',\\n  }}\\n/>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"children\",\n      children: \"Children\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"children\"\n      }), \" prop to pass any in any valid React children to the \", _jsx(_components.code, {\n        children: \"ModalFooter\"\n      }), \". The children will appear above the submit and cancel buttons and outside of the internal \", _jsx(_components.code, {\n        children: \"Container\"\n      }), \" component. If you require children above the buttons, you can build your own \", _jsx(_components.code, {\n        children: \"ModalFooter\"\n      }), \" component using the \", _jsx(_components.code, {\n        children: \"Button\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"Container\"\n      }), \" components.\"]\n    }), \"\\n\", _jsx(Canvas, {\n      of: ModalFooterStories.Children\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import {\\n  BlockSize,\\n  Display,\\n  FlexDirection,\\n} from '../../../helpers/constants/design-system';\\nimport {\\n  ModalFooter,\\n  Checkbox,\\n  Container,\\n  ContainerMaxWidth,\\n} from '../../component-library';\\n\\nconst [checked, setChecked] = React.useState(false);\\nconst handleCheckboxChange = () => setChecked(!checked);\\n\\n<ModalFooter\\n  display={Display.Flex}\\n  flexDirection={FlexDirection.Column}\\n  alignItems={AlignItems.flexStart}\\n  gap={4}\\n  onSubmit={handleOnSubmit}\\n  onCancel={handleOnCancel}\\n>\\n  <Container\\n    maxWidth={ContainerMaxWidth.Sm}\\n    marginLeft=\\\"auto\\\"\\n    marginRight=\\\"auto\\\"\\n    marginBottom={4}\\n  >\\n    <Checkbox\\n      label=\\\"I agree to the terms and conditions\\\"\\n      isChecked={checked}\\n      onChange={handleCheckboxChange}\\n    />\\n  </Container>\\n</ModalFooter>;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"container-props\",\n      children: \"Container Props\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"ModalFooter\"\n      }), \" has an internal container that prevents the buttons from being large widths. You can override these props by passing in a \", _jsx(_components.code, {\n        children: \"containerProps\"\n      }), \" prop. Below shows the \", _jsx(_components.code, {\n        children: \"Container\"\n      }), \" with different \", _jsx(_components.code, {\n        children: \"maxWidth\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"backgroundColor\"\n      }), \" props. To see the button retain it's width at different \", _jsx(_components.code, {\n        children: \"ModalContent\"\n      }), \" sizes see the \", _jsx(_components.a, {\n        href: \"?path=/story/components-componentlibrary-modalcontent--size\",\n        children: \"ModalContent size story\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Light red shows the \", _jsx(_components.code, {\n          children: \"Container\"\n        }), \" bounding box\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Light blue shows the \", _jsx(_components.code, {\n          children: \"ModalFooter\"\n        }), \" bounding box\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Canvas, {\n      of: ModalFooterStories.ContainerProps\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import {\\n  ModalFooter,\\n  Box,\\n  Display,\\n  FlexDirection,\\n  BackgroundColor,\\n  ContainerMaxWidth,\\n} from '../../component-library';\\n\\n<Box display={Display.Flex} flexDirection={FlexDirection.Column} gap={4}>\\n  <ModalFooter\\n    containerProps={{\\n      maxWidth: ContainerMaxWidth.Md,\\n      backgroundColor: BackgroundColor.errorMuted,\\n    }}\\n    backgroundColor={BackgroundColor.primaryMuted}\\n  />\\n  <ModalFooter\\n    containerProps={{\\n      maxWidth: ContainerMaxWidth.Lg,\\n      backgroundColor: BackgroundColor.errorMuted,\\n    }}\\n    backgroundColor={BackgroundColor.primaryMuted}\\n  />\\n  <ModalFooter\\n    containerProps={{\\n      maxWidth: null,\\n      backgroundColor: BackgroundColor.errorMuted,\\n    }}\\n    backgroundColor={BackgroundColor.primaryMuted}\\n  />\\n</Box>;\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":[],"sourceRoot":""}